import type { AgentCard, GetTaskResponse, MessageSendParams, SendMessageResponse, SendStreamingMessageResponse, Task, TaskQueryParams } from '@mastra/core/a2a';
import type { ClientOptions } from '../types.js';
import { BaseResource } from './base.js';
/**
 * Class for interacting with an agent via the A2A protocol
 */
export declare class A2A extends BaseResource {
    private agentId;
    constructor(options: ClientOptions, agentId: string);
    /**
     * Get the agent card with metadata about the agent
     * @returns Promise containing the agent card information
     */
    getCard(): Promise<AgentCard>;
    /**
     * Send a message to the agent and gets a message or task response
     * @param params - Parameters for the task
     * @returns Promise containing the response
     */
    sendMessage(params: MessageSendParams): Promise<SendMessageResponse>;
    /**
     * Sends a message to an agent to initiate/continue a task and subscribes
     * the client to real-time updates for that task via Server-Sent Events (SSE).
     * @param params - Parameters for the task
     * @returns A stream of Server-Sent Events. Each SSE `data` field contains a `SendStreamingMessageResponse`
     */
    sendStreamingMessage(params: MessageSendParams): Promise<AsyncIterable<SendStreamingMessageResponse>>;
    /**
     * Get the status and result of a task
     * @param params - Parameters for querying the task
     * @returns Promise containing the task response
     */
    getTask(params: TaskQueryParams): Promise<GetTaskResponse>;
    /**
     * Cancel a running task
     * @param params - Parameters identifying the task to cancel
     * @returns Promise containing the task response
     */
    cancelTask(params: TaskQueryParams): Promise<Task>;
}
//# sourceMappingURL=a2a.d.ts.map