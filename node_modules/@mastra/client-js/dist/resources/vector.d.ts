import type { CreateIndexParams, GetVectorIndexResponse, QueryVectorParams, QueryVectorResponse, ClientOptions, UpsertVectorParams } from '../types.js';
import { BaseResource } from './base.js';
export declare class Vector extends BaseResource {
    private vectorName;
    constructor(options: ClientOptions, vectorName: string);
    /**
     * Retrieves details about a specific vector index
     * @param indexName - Name of the index to get details for
     * @returns Promise containing vector index details
     */
    details(indexName: string): Promise<GetVectorIndexResponse>;
    /**
     * Deletes a vector index
     * @param indexName - Name of the index to delete
     * @returns Promise indicating deletion success
     */
    delete(indexName: string): Promise<{
        success: boolean;
    }>;
    /**
     * Retrieves a list of all available indexes
     * @returns Promise containing array of index names
     */
    getIndexes(): Promise<{
        indexes: string[];
    }>;
    /**
     * Creates a new vector index
     * @param params - Parameters for index creation including dimension and metric
     * @returns Promise indicating creation success
     */
    createIndex(params: CreateIndexParams): Promise<{
        success: boolean;
    }>;
    /**
     * Upserts vectors into an index
     * @param params - Parameters containing vectors, metadata, and optional IDs
     * @returns Promise containing array of vector IDs
     */
    upsert(params: UpsertVectorParams): Promise<string[]>;
    /**
     * Queries vectors in an index
     * @param params - Query parameters including query vector and search options
     * @returns Promise containing query results
     */
    query(params: QueryVectorParams): Promise<QueryVectorResponse>;
}
//# sourceMappingURL=vector.d.ts.map