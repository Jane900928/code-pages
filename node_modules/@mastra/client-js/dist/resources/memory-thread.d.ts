import type { StorageThreadType } from '@mastra/core';
import type { GetMemoryThreadMessagesResponse, ClientOptions, UpdateMemoryThreadParams, GetMemoryThreadMessagesParams, GetMemoryThreadMessagesPaginatedParams, GetMemoryThreadMessagesPaginatedResponse } from '../types.js';
import { BaseResource } from './base.js';
export declare class MemoryThread extends BaseResource {
    private threadId;
    private agentId;
    constructor(options: ClientOptions, threadId: string, agentId: string);
    /**
     * Retrieves the memory thread details
     * @returns Promise containing thread details including title and metadata
     */
    get(): Promise<StorageThreadType>;
    /**
     * Updates the memory thread properties
     * @param params - Update parameters including title and metadata
     * @returns Promise containing updated thread details
     */
    update(params: UpdateMemoryThreadParams): Promise<StorageThreadType>;
    /**
     * Deletes the memory thread
     * @returns Promise containing deletion result
     */
    delete(): Promise<{
        result: string;
    }>;
    /**
     * Retrieves messages associated with the thread
     * @param params - Optional parameters including limit for number of messages to retrieve
     * @returns Promise containing thread messages and UI messages
     */
    getMessages(params?: GetMemoryThreadMessagesParams): Promise<GetMemoryThreadMessagesResponse>;
    /**
     * Retrieves paginated messages associated with the thread with advanced filtering and selection options
     * @param params - Pagination parameters including selectBy criteria, page, perPage, date ranges, and message inclusion options
     * @returns Promise containing paginated thread messages with pagination metadata (total, page, perPage, hasMore)
     */
    getMessagesPaginated({ selectBy, ...rest }: GetMemoryThreadMessagesPaginatedParams): Promise<GetMemoryThreadMessagesPaginatedResponse>;
    /**
     * Deletes one or more messages from the thread
     * @param messageIds - Can be a single message ID (string), array of message IDs,
     *                     message object with id property, or array of message objects
     * @returns Promise containing deletion result
     */
    deleteMessages(messageIds: string | string[] | {
        id: string;
    } | {
        id: string;
    }[]): Promise<{
        success: boolean;
        message: string;
    }>;
}
//# sourceMappingURL=memory-thread.d.ts.map