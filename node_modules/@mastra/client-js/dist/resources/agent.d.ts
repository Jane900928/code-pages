import { processDataStream } from '@ai-sdk/ui-utils';
import { type MastraLanguageModel } from '@mastra/core';
import { type GenerateReturn } from '@mastra/core/llm';
import type { JSONSchema7 } from 'json-schema';
import { ZodSchema } from 'zod';
import type { GenerateParams, GetAgentResponse, GetEvalsByAgentIdResponse, GetToolResponse, ClientOptions, StreamParams } from '../types.js';
import { BaseResource } from './base.js';
import type { RuntimeContext } from '@mastra/core/runtime-context';
export declare class AgentVoice extends BaseResource {
    private agentId;
    constructor(options: ClientOptions, agentId: string);
    /**
     * Convert text to speech using the agent's voice provider
     * @param text - Text to convert to speech
     * @param options - Optional provider-specific options for speech generation
     * @returns Promise containing the audio data
     */
    speak(text: string, options?: {
        speaker?: string;
        [key: string]: any;
    }): Promise<Response>;
    /**
     * Convert speech to text using the agent's voice provider
     * @param audio - Audio data to transcribe
     * @param options - Optional provider-specific options
     * @returns Promise containing the transcribed text
     */
    listen(audio: Blob, options?: Record<string, any>): Promise<{
        text: string;
    }>;
    /**
     * Get available speakers for the agent's voice provider
     * @returns Promise containing list of available speakers
     */
    getSpeakers(): Promise<Array<{
        voiceId: string;
        [key: string]: any;
    }>>;
    /**
     * Get the listener configuration for the agent's voice provider
     * @returns Promise containing a check if the agent has listening capabilities
     */
    getListener(): Promise<{
        enabled: boolean;
    }>;
}
export declare class Agent extends BaseResource {
    private agentId;
    readonly voice: AgentVoice;
    constructor(options: ClientOptions, agentId: string);
    /**
     * Retrieves details about the agent
     * @returns Promise containing agent details including model and instructions
     */
    details(): Promise<GetAgentResponse>;
    /**
     * Generates a response from the agent
     * @param params - Generation parameters including prompt
     * @returns Promise containing the generated response
     */
    generate(params: GenerateParams<undefined> & {
        output?: never;
        experimental_output?: never;
    }): Promise<GenerateReturn<any, undefined, undefined>>;
    generate<Output extends JSONSchema7 | ZodSchema>(params: GenerateParams<Output> & {
        output: Output;
        experimental_output?: never;
    }): Promise<GenerateReturn<any, Output, undefined>>;
    generate<StructuredOutput extends JSONSchema7 | ZodSchema>(params: GenerateParams<StructuredOutput> & {
        output?: never;
        experimental_output: StructuredOutput;
    }): Promise<GenerateReturn<any, undefined, StructuredOutput>>;
    private processChatResponse;
    /**
     * Streams a response from the agent
     * @param params - Stream parameters including prompt
     * @returns Promise containing the enhanced Response object with processDataStream method
     */
    stream<T extends JSONSchema7 | ZodSchema | undefined = undefined>(params: StreamParams<T>): Promise<Response & {
        processDataStream: (options?: Omit<Parameters<typeof processDataStream>[0], 'stream'>) => Promise<void>;
    }>;
    /**
     * Processes the stream response and handles tool calls
     */
    private processStreamResponse;
    /**
     * Gets details about a specific tool available to the agent
     * @param toolId - ID of the tool to retrieve
     * @returns Promise containing tool details
     */
    getTool(toolId: string): Promise<GetToolResponse>;
    /**
     * Executes a tool for the agent
     * @param toolId - ID of the tool to execute
     * @param params - Parameters required for tool execution
     * @returns Promise containing the tool execution results
     */
    executeTool(toolId: string, params: {
        data: any;
        runtimeContext?: RuntimeContext;
    }): Promise<any>;
    /**
     * Retrieves evaluation results for the agent
     * @returns Promise containing agent evaluations
     */
    evals(): Promise<GetEvalsByAgentIdResponse>;
    /**
     * Retrieves live evaluation results for the agent
     * @returns Promise containing live agent evaluations
     */
    liveEvals(): Promise<GetEvalsByAgentIdResponse>;
    /**
     * Updates the model for the agent
     * @param params - Parameters for updating the model
     * @returns Promise containing the updated model
     */
    updateModel(params: {
        model: MastraLanguageModel;
    }): Promise<{
        message: string;
    }>;
}
//# sourceMappingURL=agent.d.ts.map