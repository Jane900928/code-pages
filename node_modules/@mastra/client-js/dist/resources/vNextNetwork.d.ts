import type { WatchEvent } from '@mastra/core/workflows';
import type { ClientOptions, GetVNextNetworkResponse, GenerateVNextNetworkResponse, LoopVNextNetworkResponse, GenerateOrStreamVNextNetworkParams, LoopStreamVNextNetworkParams } from '../types.js';
import { BaseResource } from './base.js';
import type { RuntimeContext } from '@mastra/core/runtime-context';
export declare class VNextNetwork extends BaseResource {
    private networkId;
    constructor(options: ClientOptions, networkId: string);
    /**
     * Retrieves details about the network
     * @returns Promise containing vNext network details
     */
    details(): Promise<GetVNextNetworkResponse>;
    /**
     * Generates a response from the v-next network
     * @param params - Generation parameters including message
     * @returns Promise containing the generated response
     */
    generate(params: GenerateOrStreamVNextNetworkParams): Promise<GenerateVNextNetworkResponse>;
    /**
     * Generates a response from the v-next network using multiple primitives
     * @param params - Generation parameters including message
     * @returns Promise containing the generated response
     */
    loop(params: {
        message: string;
        runtimeContext?: RuntimeContext | Record<string, any>;
    }): Promise<LoopVNextNetworkResponse>;
    private streamProcessor;
    /**
     * Streams a response from the v-next network
     * @param params - Stream parameters including message
     * @returns Promise containing the results
     */
    stream(params: GenerateOrStreamVNextNetworkParams, onRecord: (record: WatchEvent) => void): Promise<void>;
    /**
     * Streams a response from the v-next network loop
     * @param params - Stream parameters including message
     * @returns Promise containing the results
     */
    loopStream(params: LoopStreamVNextNetworkParams, onRecord: (record: WatchEvent) => void): Promise<void>;
}
//# sourceMappingURL=vNextNetwork.d.ts.map