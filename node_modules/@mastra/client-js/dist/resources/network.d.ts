import { processDataStream } from '@ai-sdk/ui-utils';
import type { GenerateReturn } from '@mastra/core';
import type { JSONSchema7 } from 'json-schema';
import type { ZodSchema } from 'zod';
import type { GenerateParams, ClientOptions, StreamParams, GetNetworkResponse } from '../types.js';
import { BaseResource } from './base.js';
export declare class Network extends BaseResource {
    private networkId;
    constructor(options: ClientOptions, networkId: string);
    /**
     * Retrieves details about the network
     * @returns Promise containing network details
     */
    details(): Promise<GetNetworkResponse>;
    /**
     * Generates a response from the agent
     * @param params - Generation parameters including prompt
     * @returns Promise containing the generated response
     */
    generate<Output extends JSONSchema7 | ZodSchema | undefined = undefined, StructuredOutput extends JSONSchema7 | ZodSchema | undefined = undefined>(params: GenerateParams<Output>): Promise<GenerateReturn<any, Output, StructuredOutput>>;
    /**
     * Streams a response from the agent
     * @param params - Stream parameters including prompt
     * @returns Promise containing the enhanced Response object with processDataStream method
     */
    stream<T extends JSONSchema7 | ZodSchema | undefined = undefined>(params: StreamParams<T>): Promise<Response & {
        processDataStream: (options?: Omit<Parameters<typeof processDataStream>[0], 'stream'>) => Promise<void>;
    }>;
}
//# sourceMappingURL=network.d.ts.map