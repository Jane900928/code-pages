import type { ClientOptions, LegacyWorkflowRunResult, GetLegacyWorkflowRunsResponse, GetWorkflowRunsParams, GetLegacyWorkflowResponse } from '../types.js';
import { BaseResource } from './base.js';
export declare class LegacyWorkflow extends BaseResource {
    private workflowId;
    constructor(options: ClientOptions, workflowId: string);
    /**
     * Retrieves details about the legacy workflow
     * @returns Promise containing legacy workflow details including steps and graphs
     */
    details(): Promise<GetLegacyWorkflowResponse>;
    /**
     * Retrieves all runs for a legacy workflow
     * @param params - Parameters for filtering runs
     * @returns Promise containing legacy workflow runs array
     */
    runs(params?: GetWorkflowRunsParams): Promise<GetLegacyWorkflowRunsResponse>;
    /**
     * Creates a new legacy workflow run
     * @returns Promise containing the generated run ID
     */
    createRun(params?: {
        runId?: string;
    }): Promise<{
        runId: string;
    }>;
    /**
     * Starts a legacy workflow run synchronously without waiting for the workflow to complete
     * @param params - Object containing the runId and triggerData
     * @returns Promise containing success message
     */
    start(params: {
        runId: string;
        triggerData: Record<string, any>;
    }): Promise<{
        message: string;
    }>;
    /**
     * Resumes a suspended legacy workflow step synchronously without waiting for the workflow to complete
     * @param stepId - ID of the step to resume
     * @param runId - ID of the legacy workflow run
     * @param context - Context to resume the legacy workflow with
     * @returns Promise containing the legacy workflow resume results
     */
    resume({ stepId, runId, context, }: {
        stepId: string;
        runId: string;
        context: Record<string, any>;
    }): Promise<{
        message: string;
    }>;
    /**
     * Starts a workflow run asynchronously and returns a promise that resolves when the workflow is complete
     * @param params - Object containing the optional runId and triggerData
     * @returns Promise containing the workflow execution results
     */
    startAsync(params: {
        runId?: string;
        triggerData: Record<string, any>;
    }): Promise<LegacyWorkflowRunResult>;
    /**
     * Resumes a suspended legacy workflow step asynchronously and returns a promise that resolves when the workflow is complete
     * @param params - Object containing the runId, stepId, and context
     * @returns Promise containing the workflow resume results
     */
    resumeAsync(params: {
        runId: string;
        stepId: string;
        context: Record<string, any>;
    }): Promise<LegacyWorkflowRunResult>;
    /**
     * Creates an async generator that processes a readable stream and yields records
     * separated by the Record Separator character (\x1E)
     *
     * @param stream - The readable stream to process
     * @returns An async generator that yields parsed records
     */
    private streamProcessor;
    /**
     * Watches legacy workflow transitions in real-time
     * @param runId - Optional run ID to filter the watch stream
     * @returns AsyncGenerator that yields parsed records from the legacy workflow watch stream
     */
    watch({ runId }: {
        runId?: string;
    }, onRecord: (record: LegacyWorkflowRunResult) => void): Promise<void>;
}
//# sourceMappingURL=legacy-workflow.d.ts.map