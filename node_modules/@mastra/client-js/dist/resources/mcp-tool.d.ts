import type { RuntimeContext } from '@mastra/core/runtime-context';
import type { ClientOptions, McpToolInfo } from '../types.js';
import { BaseResource } from './base.js';
/**
 * Represents a specific tool available on a specific MCP server.
 * Provides methods to get details and execute the tool.
 */
export declare class MCPTool extends BaseResource {
    private serverId;
    private toolId;
    constructor(options: ClientOptions, serverId: string, toolId: string);
    /**
     * Retrieves details about this specific tool from the MCP server.
     * @returns Promise containing the tool's information (name, description, schema).
     */
    details(): Promise<McpToolInfo>;
    /**
     * Executes this specific tool on the MCP server.
     * @param params - Parameters for tool execution, including data/args and optional runtimeContext.
     * @returns Promise containing the result of the tool execution.
     */
    execute(params: {
        data?: any;
        runtimeContext?: RuntimeContext;
    }): Promise<any>;
}
//# sourceMappingURL=mcp-tool.d.ts.map