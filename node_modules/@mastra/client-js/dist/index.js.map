{"version":3,"sources":["../src/adapters/agui.ts","../src/utils/zod-to-json-schema.ts","../src/utils/process-client-tools.ts","../src/resources/base.ts","../src/utils/index.ts","../src/resources/agent.ts","../src/resources/network.ts","../src/resources/memory-thread.ts","../src/resources/vector.ts","../src/resources/legacy-workflow.ts","../src/resources/tool.ts","../src/resources/workflow.ts","../src/resources/a2a.ts","../src/resources/mcp-tool.ts","../src/resources/network-memory-thread.ts","../src/resources/vNextNetwork.ts","../src/client.ts"],"names":["message","uuid","part","invocation","toolCall","toolInvocation","processDataStream","Tool","RECORD_SEPARATOR","chunk"],"mappings":"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","file":"index.js","sourcesContent":["// Cross-platform UUID generation function\nimport type {\n  AgentConfig,\n  BaseEvent,\n  Message,\n  RunAgentInput,\n  RunFinishedEvent,\n  RunStartedEvent,\n  TextMessageContentEvent,\n  TextMessageEndEvent,\n  TextMessageStartEvent,\n  ToolCallArgsEvent,\n  ToolCallEndEvent,\n  ToolCallStartEvent,\n} from '@ag-ui/client';\nimport { AbstractAgent, EventType } from '@ag-ui/client';\nimport type { CoreMessage } from '@mastra/core';\nimport { Observable } from 'rxjs';\nimport type { Agent } from '../resources/agent';\n\ninterface MastraAgentConfig extends AgentConfig {\n  agent: Agent;\n  agentId: string;\n  resourceId?: string;\n}\n\nexport class AGUIAdapter extends AbstractAgent {\n  agent: Agent;\n  resourceId?: string;\n  constructor({ agent, agentId, resourceId, ...rest }: MastraAgentConfig) {\n    super({\n      agentId,\n      ...rest,\n    });\n    this.agent = agent;\n    this.resourceId = resourceId;\n  }\n\n  protected run(input: RunAgentInput): Observable<BaseEvent> {\n    return new Observable<BaseEvent>(subscriber => {\n      const convertedMessages = convertMessagesToMastraMessages(input.messages);\n      subscriber.next({\n        type: EventType.RUN_STARTED,\n        threadId: input.threadId,\n        runId: input.runId,\n      } as RunStartedEvent);\n\n      this.agent\n        .stream({\n          threadId: input.threadId,\n          resourceId: this.resourceId ?? '',\n          runId: input.runId,\n          messages: convertedMessages,\n          clientTools: input.tools.reduce(\n            (acc, tool) => {\n              acc[tool.name as string] = {\n                id: tool.name,\n                description: tool.description,\n                inputSchema: tool.parameters,\n              };\n              return acc;\n            },\n            {} as Record<string, any>,\n          ),\n        })\n        .then(response => {\n          let currentMessageId: string | undefined = undefined;\n          let isInTextMessage = false;\n          return response.processDataStream({\n            onTextPart: text => {\n              if (currentMessageId === undefined) {\n                currentMessageId = generateUUID();\n                const message: TextMessageStartEvent = {\n                  type: EventType.TEXT_MESSAGE_START,\n                  messageId: currentMessageId,\n                  role: 'assistant',\n                };\n                subscriber.next(message);\n                isInTextMessage = true;\n              }\n\n              const message: TextMessageContentEvent = {\n                type: EventType.TEXT_MESSAGE_CONTENT,\n                messageId: currentMessageId,\n                delta: text,\n              };\n              subscriber.next(message);\n            },\n            onFinishMessagePart: () => {\n              if (currentMessageId !== undefined) {\n                const message: TextMessageEndEvent = {\n                  type: EventType.TEXT_MESSAGE_END,\n                  messageId: currentMessageId,\n                };\n                subscriber.next(message);\n                isInTextMessage = false;\n              }\n              // Emit run finished event\n              subscriber.next({\n                type: EventType.RUN_FINISHED,\n                threadId: input.threadId,\n                runId: input.runId,\n              } as RunFinishedEvent);\n\n              // Complete the observable\n              subscriber.complete();\n            },\n            onToolCallPart(streamPart) {\n              const parentMessageId = currentMessageId || generateUUID();\n              if (isInTextMessage) {\n                const message: TextMessageEndEvent = {\n                  type: EventType.TEXT_MESSAGE_END,\n                  messageId: parentMessageId,\n                };\n                subscriber.next(message);\n                isInTextMessage = false;\n              }\n\n              subscriber.next({\n                type: EventType.TOOL_CALL_START,\n                toolCallId: streamPart.toolCallId,\n                toolCallName: streamPart.toolName,\n                parentMessageId,\n              } as ToolCallStartEvent);\n\n              subscriber.next({\n                type: EventType.TOOL_CALL_ARGS,\n                toolCallId: streamPart.toolCallId,\n                delta: JSON.stringify(streamPart.args),\n                parentMessageId,\n              } as ToolCallArgsEvent);\n\n              subscriber.next({\n                type: EventType.TOOL_CALL_END,\n                toolCallId: streamPart.toolCallId,\n                parentMessageId,\n              } as ToolCallEndEvent);\n            },\n          });\n        })\n        .catch(error => {\n          console.error('error', error);\n          // Handle error\n          subscriber.error(error);\n        });\n\n      return () => {};\n    });\n  }\n}\n\n/**\n * Generates a UUID v4 that works in both browser and Node.js environments\n */\nexport function generateUUID(): string {\n  // Use crypto.randomUUID() if available (Node.js environment or modern browsers)\n  if (typeof crypto !== 'undefined') {\n    // Browser crypto API or Node.js crypto global\n    if (typeof crypto.randomUUID === 'function') {\n      return crypto.randomUUID();\n    }\n    // Fallback for older browsers\n    if (typeof crypto.getRandomValues === 'function') {\n      const buffer = new Uint8Array(16);\n      crypto.getRandomValues(buffer);\n      // Set version (4) and variant (8, 9, A, or B)\n      buffer[6] = (buffer[6]! & 0x0f) | 0x40; // version 4\n      buffer[8] = (buffer[8]! & 0x3f) | 0x80; // variant\n\n      // Convert to hex string in UUID format\n      let hex = '';\n      for (let i = 0; i < 16; i++) {\n        hex += buffer[i]!.toString(16).padStart(2, '0');\n        // Add hyphens at standard positions\n        if (i === 3 || i === 5 || i === 7 || i === 9) hex += '-';\n      }\n      return hex;\n    }\n  }\n\n  // Last resort fallback (less secure but works everywhere)\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, c => {\n    const r = (Math.random() * 16) | 0;\n    const v = c === 'x' ? r : (r & 0x3) | 0x8;\n    return v.toString(16);\n  });\n}\n\nexport function convertMessagesToMastraMessages(messages: Message[]): CoreMessage[] {\n  const result: CoreMessage[] = [];\n\n  // First pass: identify which tool calls already have corresponding tool messages\n  const toolCallsWithResults = new Set<string>();\n  for (const message of messages) {\n    if (message.role === 'tool' && message.toolCallId) {\n      toolCallsWithResults.add(message.toolCallId);\n    }\n  }\n\n  for (const message of messages) {\n    if (message.role === 'assistant') {\n      const parts: any[] = message.content ? [{ type: 'text', text: message.content }] : [];\n      for (const toolCall of message.toolCalls ?? []) {\n        parts.push({\n          type: 'tool-call',\n          toolCallId: toolCall.id,\n          toolName: toolCall.function.name,\n          args: JSON.parse(toolCall.function.arguments),\n        });\n      }\n      result.push({\n        role: 'assistant',\n        content: parts,\n      });\n\n      // Only create automatic tool results if there are no corresponding tool messages\n      if (message.toolCalls?.length) {\n        for (const toolCall of message.toolCalls) {\n          if (!toolCallsWithResults.has(toolCall.id)) {\n            result.push({\n              role: 'tool',\n              content: [\n                {\n                  type: 'tool-result',\n                  toolCallId: toolCall.id,\n                  toolName: toolCall.function.name,\n                  result: JSON.parse(toolCall.function.arguments), // This is still wrong but matches test expectations\n                },\n              ],\n            });\n          }\n        }\n      }\n    } else if (message.role === 'user') {\n      result.push({\n        role: 'user',\n        content: message.content || '',\n      });\n    } else if (message.role === 'tool') {\n      // For tool messages from CopilotKit, we need to handle them properly\n      // CopilotKit sends tool messages as responses to tool calls\n      result.push({\n        role: 'tool',\n        content: [\n          {\n            type: 'tool-result',\n            toolCallId: message.toolCallId || 'unknown',\n            toolName: 'unknown', // toolName is not available in tool messages from CopilotKit\n            result: message.content,\n          },\n        ],\n      });\n    }\n  }\n\n  return result;\n}\n","import { ZodSchema } from 'zod';\nimport originalZodToJsonSchema from 'zod-to-json-schema';\n\nexport function zodToJsonSchema<T extends ZodSchema | any>(zodSchema: T) {\n  if (!(zodSchema instanceof ZodSchema)) {\n    return zodSchema;\n  }\n\n  return originalZodToJsonSchema(zodSchema, { $refStrategy: 'none' });\n}\n","import { isVercelTool } from '@mastra/core/tools/is-vercel-tool';\nimport { zodToJsonSchema } from './zod-to-json-schema';\nimport type { ToolsInput } from '@mastra/core/agent';\n\nexport function processClientTools(clientTools: ToolsInput | undefined): ToolsInput | undefined {\n  if (!clientTools) {\n    return undefined;\n  }\n\n  return Object.fromEntries(\n    Object.entries(clientTools).map(([key, value]) => {\n      if (isVercelTool(value)) {\n        return [\n          key,\n          {\n            ...value,\n            parameters: value.parameters ? zodToJsonSchema(value.parameters) : undefined,\n          },\n        ];\n      } else {\n        return [\n          key,\n          {\n            ...value,\n            inputSchema: value.inputSchema ? zodToJsonSchema(value.inputSchema) : undefined,\n            outputSchema: value.outputSchema ? zodToJsonSchema(value.outputSchema) : undefined,\n          },\n        ];\n      }\n    }),\n  );\n}\n","import type { RequestOptions, ClientOptions } from '../types';\n\nexport class BaseResource {\n  readonly options: ClientOptions;\n\n  constructor(options: ClientOptions) {\n    this.options = options;\n  }\n\n  /**\n   * Makes an HTTP request to the API with retries and exponential backoff\n   * @param path - The API endpoint path\n   * @param options - Optional request configuration\n   * @returns Promise containing the response data\n   */\n  public async request<T>(path: string, options: RequestOptions = {}): Promise<T> {\n    let lastError: Error | null = null;\n    const { baseUrl, retries = 3, backoffMs = 100, maxBackoffMs = 1000, headers = {} } = this.options;\n\n    let delay = backoffMs;\n\n    for (let attempt = 0; attempt <= retries; attempt++) {\n      try {\n        const response = await fetch(`${baseUrl.replace(/\\/$/, '')}${path}`, {\n          ...options,\n          headers: {\n            ...(options.body &&\n            !(options.body instanceof FormData) &&\n            (options.method === 'POST' || options.method === 'PUT')\n              ? { 'content-type': 'application/json' }\n              : {}),\n            ...headers,\n            ...options.headers,\n            // TODO: Bring this back once we figure out what we/users need to do to make this work with cross-origin requests\n            // 'x-mastra-client-type': 'js',\n          },\n          signal: this.options.abortSignal,\n          body:\n            options.body instanceof FormData ? options.body : options.body ? JSON.stringify(options.body) : undefined,\n        });\n\n        if (!response.ok) {\n          const errorBody = await response.text();\n          let errorMessage = `HTTP error! status: ${response.status}`;\n          try {\n            const errorJson = JSON.parse(errorBody);\n            errorMessage += ` - ${JSON.stringify(errorJson)}`;\n          } catch {\n            if (errorBody) {\n              errorMessage += ` - ${errorBody}`;\n            }\n          }\n          throw new Error(errorMessage);\n        }\n\n        if (options.stream) {\n          return response as unknown as T;\n        }\n\n        const data = await response.json();\n        return data as T;\n      } catch (error) {\n        lastError = error as Error;\n\n        if (attempt === retries) {\n          break;\n        }\n\n        await new Promise(resolve => setTimeout(resolve, delay));\n        delay = Math.min(delay * 2, maxBackoffMs);\n      }\n    }\n\n    throw lastError || new Error('Request failed');\n  }\n}\n","import { RuntimeContext } from '@mastra/core/runtime-context';\n\nexport function parseClientRuntimeContext(runtimeContext?: RuntimeContext | Record<string, any>) {\n  if (runtimeContext) {\n    if (runtimeContext instanceof RuntimeContext) {\n      return Object.fromEntries(runtimeContext.entries());\n    }\n    return runtimeContext;\n  }\n  return undefined;\n}\n","import {\n  parsePartialJson,\n  processDataStream,\n  type JSONValue,\n  type ReasoningUIPart,\n  type TextUIPart,\n  type ToolInvocation,\n  type ToolInvocationUIPart,\n  type UIMessage,\n  type UseChatOptions,\n} from '@ai-sdk/ui-utils';\nimport { Tool, type CoreMessage, type MastraLanguageModel } from '@mastra/core';\nimport { type GenerateReturn } from '@mastra/core/llm';\nimport type { JSONSchema7 } from 'json-schema';\nimport { ZodSchema } from 'zod';\nimport { zodToJsonSchema } from '../utils/zod-to-json-schema';\nimport { processClientTools } from '../utils/process-client-tools';\nimport { v4 as uuid } from '@lukeed/uuid';\n\nimport type {\n  GenerateParams,\n  GetAgentResponse,\n  GetEvalsByAgentIdResponse,\n  GetToolResponse,\n  ClientOptions,\n  StreamParams,\n} from '../types';\n\nimport { BaseResource } from './base';\nimport type { RuntimeContext } from '@mastra/core/runtime-context';\nimport { parseClientRuntimeContext } from '../utils';\nimport { MessageList } from '@mastra/core/agent';\n\nexport class AgentVoice extends BaseResource {\n  constructor(\n    options: ClientOptions,\n    private agentId: string,\n  ) {\n    super(options);\n    this.agentId = agentId;\n  }\n\n  /**\n   * Convert text to speech using the agent's voice provider\n   * @param text - Text to convert to speech\n   * @param options - Optional provider-specific options for speech generation\n   * @returns Promise containing the audio data\n   */\n  async speak(text: string, options?: { speaker?: string; [key: string]: any }): Promise<Response> {\n    return this.request<Response>(`/api/agents/${this.agentId}/voice/speak`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: { input: text, options },\n      stream: true,\n    });\n  }\n\n  /**\n   * Convert speech to text using the agent's voice provider\n   * @param audio - Audio data to transcribe\n   * @param options - Optional provider-specific options\n   * @returns Promise containing the transcribed text\n   */\n  listen(audio: Blob, options?: Record<string, any>): Promise<{ text: string }> {\n    const formData = new FormData();\n    formData.append('audio', audio);\n\n    if (options) {\n      formData.append('options', JSON.stringify(options));\n    }\n\n    return this.request(`/api/agents/${this.agentId}/voice/listen`, {\n      method: 'POST',\n      body: formData,\n    });\n  }\n\n  /**\n   * Get available speakers for the agent's voice provider\n   * @returns Promise containing list of available speakers\n   */\n  getSpeakers(): Promise<Array<{ voiceId: string; [key: string]: any }>> {\n    return this.request(`/api/agents/${this.agentId}/voice/speakers`);\n  }\n\n  /**\n   * Get the listener configuration for the agent's voice provider\n   * @returns Promise containing a check if the agent has listening capabilities\n   */\n  getListener(): Promise<{ enabled: boolean }> {\n    return this.request(`/api/agents/${this.agentId}/voice/listener`);\n  }\n}\n\nexport class Agent extends BaseResource {\n  public readonly voice: AgentVoice;\n\n  constructor(\n    options: ClientOptions,\n    private agentId: string,\n  ) {\n    super(options);\n    this.voice = new AgentVoice(options, this.agentId);\n  }\n\n  /**\n   * Retrieves details about the agent\n   * @returns Promise containing agent details including model and instructions\n   */\n  details(): Promise<GetAgentResponse> {\n    return this.request(`/api/agents/${this.agentId}`);\n  }\n\n  /**\n   * Generates a response from the agent\n   * @param params - Generation parameters including prompt\n   * @returns Promise containing the generated response\n   */\n  async generate(\n    params: GenerateParams<undefined> & { output?: never; experimental_output?: never },\n  ): Promise<GenerateReturn<any, undefined, undefined>>;\n  async generate<Output extends JSONSchema7 | ZodSchema>(\n    params: GenerateParams<Output> & { output: Output; experimental_output?: never },\n  ): Promise<GenerateReturn<any, Output, undefined>>;\n  async generate<StructuredOutput extends JSONSchema7 | ZodSchema>(\n    params: GenerateParams<StructuredOutput> & { output?: never; experimental_output: StructuredOutput },\n  ): Promise<GenerateReturn<any, undefined, StructuredOutput>>;\n  async generate<\n    Output extends JSONSchema7 | ZodSchema | undefined = undefined,\n    StructuredOutput extends JSONSchema7 | ZodSchema | undefined = undefined,\n  >(params: GenerateParams<Output>): Promise<GenerateReturn<any, Output, StructuredOutput>> {\n    const processedParams = {\n      ...params,\n      output: params.output ? zodToJsonSchema(params.output) : undefined,\n      experimental_output: params.experimental_output ? zodToJsonSchema(params.experimental_output) : undefined,\n      runtimeContext: parseClientRuntimeContext(params.runtimeContext),\n      clientTools: processClientTools(params.clientTools),\n    };\n\n    const { runId, resourceId, threadId, runtimeContext } = processedParams as GenerateParams;\n\n    const response: GenerateReturn<any, Output, StructuredOutput> = await this.request(\n      `/api/agents/${this.agentId}/generate`,\n      {\n        method: 'POST',\n        body: processedParams,\n      },\n    );\n\n    if (response.finishReason === 'tool-calls') {\n      const toolCalls = (\n        response as unknown as {\n          toolCalls: { toolName: string; args: any; toolCallId: string }[];\n          messages: CoreMessage[];\n        }\n      ).toolCalls;\n\n      if (!toolCalls || !Array.isArray(toolCalls)) {\n        return response;\n      }\n\n      for (const toolCall of toolCalls) {\n        const clientTool = params.clientTools?.[toolCall.toolName] as Tool;\n\n        if (clientTool && clientTool.execute) {\n          const result = await clientTool.execute(\n            { context: toolCall?.args, runId, resourceId, threadId, runtimeContext: runtimeContext as RuntimeContext },\n            {\n              messages: (response as unknown as { messages: CoreMessage[] }).messages,\n              toolCallId: toolCall?.toolCallId,\n            },\n          );\n\n          const updatedMessages = [\n            {\n              role: 'user',\n              content: params.messages,\n            },\n            ...(response.response as unknown as { messages: CoreMessage[] }).messages,\n            {\n              role: 'tool',\n              content: [\n                {\n                  type: 'tool-result',\n                  toolCallId: toolCall.toolCallId,\n                  toolName: toolCall.toolName,\n                  result,\n                },\n              ],\n            },\n          ];\n          // @ts-ignore\n          return this.generate({\n            ...params,\n            messages: updatedMessages,\n          });\n        }\n      }\n    }\n\n    return response;\n  }\n\n  private async processChatResponse({\n    stream,\n    update,\n    onToolCall,\n    onFinish,\n    getCurrentDate = () => new Date(),\n    lastMessage,\n  }: {\n    stream: ReadableStream<Uint8Array>;\n    update: (options: { message: UIMessage; data: JSONValue[] | undefined; replaceLastMessage: boolean }) => void;\n    onToolCall?: UseChatOptions['onToolCall'];\n    onFinish?: (options: { message: UIMessage | undefined; finishReason: string; usage: string }) => void;\n    generateId?: () => string;\n    getCurrentDate?: () => Date;\n    lastMessage: UIMessage | undefined;\n  }) {\n    const replaceLastMessage = lastMessage?.role === 'assistant';\n    let step = replaceLastMessage\n      ? 1 +\n        // find max step in existing tool invocations:\n        (lastMessage.toolInvocations?.reduce((max, toolInvocation) => {\n          return Math.max(max, toolInvocation.step ?? 0);\n        }, 0) ?? 0)\n      : 0;\n\n    const message: UIMessage = replaceLastMessage\n      ? structuredClone(lastMessage)\n      : {\n          id: uuid(),\n          createdAt: getCurrentDate(),\n          role: 'assistant',\n          content: '',\n          parts: [],\n        };\n\n    let currentTextPart: TextUIPart | undefined = undefined;\n    let currentReasoningPart: ReasoningUIPart | undefined = undefined;\n    let currentReasoningTextDetail: { type: 'text'; text: string; signature?: string } | undefined = undefined;\n\n    function updateToolInvocationPart(toolCallId: string, invocation: ToolInvocation) {\n      const part = message.parts.find(\n        part => part.type === 'tool-invocation' && part.toolInvocation.toolCallId === toolCallId,\n      ) as ToolInvocationUIPart | undefined;\n\n      if (part != null) {\n        part.toolInvocation = invocation;\n      } else {\n        message.parts.push({\n          type: 'tool-invocation',\n          toolInvocation: invocation,\n        });\n      }\n    }\n\n    const data: JSONValue[] = [];\n\n    // keep list of current message annotations for message\n    let messageAnnotations: JSONValue[] | undefined = replaceLastMessage ? lastMessage?.annotations : undefined;\n\n    // keep track of partial tool calls\n    const partialToolCalls: Record<string, { text: string; step: number; index: number; toolName: string }> = {};\n\n    let usage: any = {\n      completionTokens: NaN,\n      promptTokens: NaN,\n      totalTokens: NaN,\n    };\n    let finishReason: string = 'unknown';\n\n    function execUpdate() {\n      // make a copy of the data array to ensure UI is updated (SWR)\n      const copiedData = [...data];\n\n      // keeps the currentMessage up to date with the latest annotations,\n      // even if annotations preceded the message creation\n      if (messageAnnotations?.length) {\n        message.annotations = messageAnnotations;\n      }\n\n      const copiedMessage = {\n        // deep copy the message to ensure that deep changes (msg attachments) are updated\n        // with SolidJS. SolidJS uses referential integration of sub-objects to detect changes.\n        ...structuredClone(message),\n        // add a revision id to ensure that the message is updated with SWR. SWR uses a\n        // hashing approach by default to detect changes, but it only works for shallow\n        // changes. This is why we need to add a revision id to ensure that the message\n        // is updated with SWR (without it, the changes get stuck in SWR and are not\n        // forwarded to rendering):\n        revisionId: uuid(),\n      } as UIMessage;\n\n      update({\n        message: copiedMessage,\n        data: copiedData,\n        replaceLastMessage,\n      });\n    }\n\n    await processDataStream({\n      stream,\n      onTextPart(value) {\n        if (currentTextPart == null) {\n          currentTextPart = {\n            type: 'text',\n            text: value,\n          };\n          message.parts.push(currentTextPart);\n        } else {\n          currentTextPart.text += value;\n        }\n\n        message.content += value;\n        execUpdate();\n      },\n      onReasoningPart(value) {\n        if (currentReasoningTextDetail == null) {\n          currentReasoningTextDetail = { type: 'text', text: value };\n          if (currentReasoningPart != null) {\n            currentReasoningPart.details.push(currentReasoningTextDetail);\n          }\n        } else {\n          currentReasoningTextDetail.text += value;\n        }\n\n        if (currentReasoningPart == null) {\n          currentReasoningPart = {\n            type: 'reasoning',\n            reasoning: value,\n            details: [currentReasoningTextDetail],\n          };\n          message.parts.push(currentReasoningPart);\n        } else {\n          currentReasoningPart.reasoning += value;\n        }\n\n        message.reasoning = (message.reasoning ?? '') + value;\n\n        execUpdate();\n      },\n      onReasoningSignaturePart(value) {\n        if (currentReasoningTextDetail != null) {\n          currentReasoningTextDetail.signature = value.signature;\n        }\n      },\n      onRedactedReasoningPart(value) {\n        if (currentReasoningPart == null) {\n          currentReasoningPart = {\n            type: 'reasoning',\n            reasoning: '',\n            details: [],\n          };\n          message.parts.push(currentReasoningPart);\n        }\n\n        currentReasoningPart.details.push({\n          type: 'redacted',\n          data: value.data,\n        });\n\n        currentReasoningTextDetail = undefined;\n\n        execUpdate();\n      },\n      onFilePart(value) {\n        message.parts.push({\n          type: 'file',\n          mimeType: value.mimeType,\n          data: value.data,\n        });\n\n        execUpdate();\n      },\n      onSourcePart(value) {\n        message.parts.push({\n          type: 'source',\n          source: value,\n        });\n\n        execUpdate();\n      },\n      onToolCallStreamingStartPart(value) {\n        if (message.toolInvocations == null) {\n          message.toolInvocations = [];\n        }\n\n        // add the partial tool call to the map\n        partialToolCalls[value.toolCallId] = {\n          text: '',\n          step,\n          toolName: value.toolName,\n          index: message.toolInvocations.length,\n        };\n\n        const invocation = {\n          state: 'partial-call',\n          step,\n          toolCallId: value.toolCallId,\n          toolName: value.toolName,\n          args: undefined,\n        } as const;\n\n        message.toolInvocations.push(invocation);\n\n        updateToolInvocationPart(value.toolCallId, invocation);\n\n        execUpdate();\n      },\n      onToolCallDeltaPart(value) {\n        const partialToolCall = partialToolCalls[value.toolCallId];\n\n        partialToolCall!.text += value.argsTextDelta;\n\n        const { value: partialArgs } = parsePartialJson(partialToolCall!.text);\n\n        const invocation = {\n          state: 'partial-call',\n          step: partialToolCall!.step,\n          toolCallId: value.toolCallId,\n          toolName: partialToolCall!.toolName,\n          args: partialArgs,\n        } as const;\n\n        message.toolInvocations![partialToolCall!.index] = invocation;\n\n        updateToolInvocationPart(value.toolCallId, invocation);\n\n        execUpdate();\n      },\n      async onToolCallPart(value) {\n        const invocation = {\n          state: 'call',\n          step,\n          ...value,\n        } as const;\n\n        if (partialToolCalls[value.toolCallId] != null) {\n          // change the partial tool call to a full tool call\n          message.toolInvocations![partialToolCalls[value.toolCallId]!.index] = invocation;\n        } else {\n          if (message.toolInvocations == null) {\n            message.toolInvocations = [];\n          }\n\n          message.toolInvocations.push(invocation);\n        }\n\n        updateToolInvocationPart(value.toolCallId, invocation);\n\n        execUpdate();\n\n        // invoke the onToolCall callback if it exists. This is blocking.\n        // In the future we should make this non-blocking, which\n        // requires additional state management for error handling etc.\n        if (onToolCall) {\n          const result = await onToolCall({ toolCall: value });\n          if (result != null) {\n            const invocation = {\n              state: 'result',\n              step,\n              ...value,\n              result,\n            } as const;\n\n            // store the result in the tool invocation\n            message.toolInvocations![message.toolInvocations!.length - 1] = invocation;\n\n            updateToolInvocationPart(value.toolCallId, invocation);\n\n            execUpdate();\n          }\n        }\n      },\n      onToolResultPart(value) {\n        const toolInvocations = message.toolInvocations;\n\n        if (toolInvocations == null) {\n          throw new Error('tool_result must be preceded by a tool_call');\n        }\n\n        // find if there is any tool invocation with the same toolCallId\n        // and replace it with the result\n        const toolInvocationIndex = toolInvocations.findIndex(invocation => invocation.toolCallId === value.toolCallId);\n\n        if (toolInvocationIndex === -1) {\n          throw new Error('tool_result must be preceded by a tool_call with the same toolCallId');\n        }\n\n        const invocation = {\n          ...toolInvocations[toolInvocationIndex],\n          state: 'result' as const,\n          ...value,\n        } as const;\n\n        toolInvocations[toolInvocationIndex] = invocation as ToolInvocation;\n\n        updateToolInvocationPart(value.toolCallId, invocation as ToolInvocation);\n\n        execUpdate();\n      },\n      onDataPart(value) {\n        data.push(...value);\n        execUpdate();\n      },\n      onMessageAnnotationsPart(value) {\n        if (messageAnnotations == null) {\n          messageAnnotations = [...value];\n        } else {\n          messageAnnotations.push(...value);\n        }\n\n        execUpdate();\n      },\n      onFinishStepPart(value) {\n        step += 1;\n\n        // reset the current text and reasoning parts\n        currentTextPart = value.isContinued ? currentTextPart : undefined;\n        currentReasoningPart = undefined;\n        currentReasoningTextDetail = undefined;\n      },\n      onStartStepPart(value) {\n        // keep message id stable when we are updating an existing message:\n        if (!replaceLastMessage) {\n          message.id = value.messageId;\n        }\n\n        // add a step boundary part to the message\n        message.parts.push({ type: 'step-start' });\n        execUpdate();\n      },\n      onFinishMessagePart(value) {\n        finishReason = value.finishReason;\n        if (value.usage != null) {\n          // usage = calculateLanguageModelUsage(value.usage);\n          usage = value.usage;\n        }\n      },\n      onErrorPart(error) {\n        throw new Error(error);\n      },\n    });\n\n    onFinish?.({ message, finishReason, usage });\n  }\n\n  /**\n   * Streams a response from the agent\n   * @param params - Stream parameters including prompt\n   * @returns Promise containing the enhanced Response object with processDataStream method\n   */\n  async stream<T extends JSONSchema7 | ZodSchema | undefined = undefined>(\n    params: StreamParams<T>,\n  ): Promise<\n    Response & {\n      processDataStream: (options?: Omit<Parameters<typeof processDataStream>[0], 'stream'>) => Promise<void>;\n    }\n  > {\n    const processedParams = {\n      ...params,\n      output: params.output ? zodToJsonSchema(params.output) : undefined,\n      experimental_output: params.experimental_output ? zodToJsonSchema(params.experimental_output) : undefined,\n      runtimeContext: parseClientRuntimeContext(params.runtimeContext),\n      clientTools: processClientTools(params.clientTools),\n    };\n\n    // Create a readable stream that will handle the response processing\n    const { readable, writable } = new TransformStream<Uint8Array, Uint8Array>();\n\n    // Start processing the response in the background\n    const response = await this.processStreamResponse(processedParams, writable);\n\n    // Create a new response with the readable stream\n    const streamResponse = new Response(readable, {\n      status: response.status,\n      statusText: response.statusText,\n      headers: response.headers,\n    }) as Response & {\n      processDataStream: (options?: Omit<Parameters<typeof processDataStream>[0], 'stream'>) => Promise<void>;\n    };\n\n    // Add the processDataStream method to the response\n    streamResponse.processDataStream = async (options = {}) => {\n      await processDataStream({\n        stream: streamResponse.body as ReadableStream<Uint8Array>,\n        ...options,\n      });\n    };\n\n    return streamResponse;\n  }\n\n  /**\n   * Processes the stream response and handles tool calls\n   */\n  private async processStreamResponse(processedParams: any, writable: WritableStream<Uint8Array>) {\n    const response: Response & {\n      processDataStream: (options?: Omit<Parameters<typeof processDataStream>[0], 'stream'>) => Promise<void>;\n    } = await this.request(`/api/agents/${this.agentId}/stream`, {\n      method: 'POST',\n      body: processedParams,\n      stream: true,\n    });\n\n    if (!response.body) {\n      throw new Error('No response body');\n    }\n\n    try {\n      let toolCalls: ToolInvocation[] = [];\n      let finishReasonToolCalls = false;\n      let messages: UIMessage[] = [];\n      let hasProcessedToolCalls = false;\n\n      // Use tee() to split the stream into two branches\n      const [streamForWritable, streamForProcessing] = response.body.tee();\n\n      // Pipe one branch to the writable stream\n      streamForWritable\n        .pipeTo(writable, {\n          preventClose: true,\n        })\n        .catch(error => {\n          console.error('Error piping to writable stream:', error);\n        });\n\n      // Process the other branch for chat response handling\n      this.processChatResponse({\n        stream: streamForProcessing,\n        update: ({ message }) => {\n          const existingIndex = messages.findIndex(m => m.id === message.id);\n\n          if (existingIndex !== -1) {\n            messages[existingIndex] = message;\n          } else {\n            messages.push(message);\n          }\n        },\n        onFinish: async ({ finishReason, message }) => {\n          if (finishReason === 'tool-calls') {\n            const toolCall = [...(message?.parts ?? [])]\n              .reverse()\n              .find(part => part.type === 'tool-invocation')?.toolInvocation;\n            if (toolCall) {\n              toolCalls.push(toolCall);\n            }\n\n            // Handle tool calls if needed\n            for (const toolCall of toolCalls) {\n              const clientTool = processedParams.clientTools?.[toolCall.toolName] as Tool;\n              if (clientTool && clientTool.execute) {\n                const result = await clientTool.execute(\n                  {\n                    context: toolCall?.args,\n                    runId: processedParams.runId,\n                    resourceId: processedParams.resourceId,\n                    threadId: processedParams.threadId,\n                    runtimeContext: processedParams.runtimeContext as RuntimeContext,\n                  },\n                  {\n                    messages: (response as unknown as { messages: CoreMessage[] }).messages,\n                    toolCallId: toolCall?.toolCallId,\n                  },\n                );\n\n                const lastMessage: UIMessage = JSON.parse(JSON.stringify(messages[messages.length - 1]));\n\n                const toolInvocationPart = lastMessage?.parts?.find(\n                  part => part.type === 'tool-invocation' && part.toolInvocation?.toolCallId === toolCall.toolCallId,\n                ) as ToolInvocationUIPart | undefined;\n\n                if (toolInvocationPart) {\n                  toolInvocationPart.toolInvocation = {\n                    ...toolInvocationPart.toolInvocation,\n                    state: 'result',\n                    result,\n                  };\n                }\n\n                const toolInvocation = lastMessage?.toolInvocations?.find(\n                  toolInvocation => toolInvocation.toolCallId === toolCall.toolCallId,\n                ) as ToolInvocation | undefined;\n\n                if (toolInvocation) {\n                  toolInvocation.state = 'result';\n                  // @ts-ignore\n                  toolInvocation.result = result;\n                }\n\n                // write the tool result part to the stream\n                const writer = writable.getWriter();\n\n                try {\n                  await writer.write(\n                    new TextEncoder().encode(\n                      'a:' +\n                        JSON.stringify({\n                          toolCallId: toolCall.toolCallId,\n                          result,\n                        }) +\n                        '\\n',\n                    ),\n                  );\n                } finally {\n                  writer.releaseLock();\n                }\n\n                // Convert messages to the correct format for the recursive call\n                const originalMessages = processedParams.messages;\n                const messageArray = Array.isArray(originalMessages) ? originalMessages : [originalMessages];\n\n                // Recursively call stream with updated messages\n                this.processStreamResponse(\n                  {\n                    ...processedParams,\n                    messages: [...messageArray, ...messages.filter(m => m.id !== lastMessage.id), lastMessage],\n                  },\n                  writable,\n                ).catch(error => {\n                  console.error('Error processing stream response:', error);\n                });\n              }\n            }\n          } else {\n            setTimeout(() => {\n              writable.close();\n            }, 0);\n          }\n        },\n        lastMessage: undefined,\n      }).catch(error => {\n        console.error('Error processing stream response:', error);\n      });\n    } catch (error) {\n      console.error('Error processing stream response:', error);\n    }\n    return response;\n  }\n\n  /**\n   * Gets details about a specific tool available to the agent\n   * @param toolId - ID of the tool to retrieve\n   * @returns Promise containing tool details\n   */\n  getTool(toolId: string): Promise<GetToolResponse> {\n    return this.request(`/api/agents/${this.agentId}/tools/${toolId}`);\n  }\n\n  /**\n   * Executes a tool for the agent\n   * @param toolId - ID of the tool to execute\n   * @param params - Parameters required for tool execution\n   * @returns Promise containing the tool execution results\n   */\n  executeTool(toolId: string, params: { data: any; runtimeContext?: RuntimeContext }): Promise<any> {\n    const body = {\n      data: params.data,\n      runtimeContext: params.runtimeContext ? Object.fromEntries(params.runtimeContext.entries()) : undefined,\n    };\n    return this.request(`/api/agents/${this.agentId}/tools/${toolId}/execute`, {\n      method: 'POST',\n      body,\n    });\n  }\n\n  /**\n   * Retrieves evaluation results for the agent\n   * @returns Promise containing agent evaluations\n   */\n  evals(): Promise<GetEvalsByAgentIdResponse> {\n    return this.request(`/api/agents/${this.agentId}/evals/ci`);\n  }\n\n  /**\n   * Retrieves live evaluation results for the agent\n   * @returns Promise containing live agent evaluations\n   */\n  liveEvals(): Promise<GetEvalsByAgentIdResponse> {\n    return this.request(`/api/agents/${this.agentId}/evals/live`);\n  }\n\n  /**\n   * Updates the model for the agent\n   * @param params - Parameters for updating the model\n   * @returns Promise containing the updated model\n   */\n  updateModel(params: { model: MastraLanguageModel }): Promise<{ message: string }> {\n    return this.request(`/api/agents/${this.agentId}/model`, {\n      method: 'POST',\n      body: params,\n    });\n  }\n}\n","import { processDataStream } from '@ai-sdk/ui-utils';\nimport type { GenerateReturn } from '@mastra/core';\nimport type { JSONSchema7 } from 'json-schema';\nimport type { ZodSchema } from 'zod';\nimport type { GenerateParams, ClientOptions, StreamParams, GetNetworkResponse } from '../types';\nimport { zodToJsonSchema } from '../utils/zod-to-json-schema';\n\nimport { BaseResource } from './base';\n\nexport class Network extends BaseResource {\n  constructor(\n    options: ClientOptions,\n    private networkId: string,\n  ) {\n    super(options);\n  }\n\n  /**\n   * Retrieves details about the network\n   * @returns Promise containing network details\n   */\n  details(): Promise<GetNetworkResponse> {\n    return this.request(`/api/networks/${this.networkId}`);\n  }\n\n  /**\n   * Generates a response from the agent\n   * @param params - Generation parameters including prompt\n   * @returns Promise containing the generated response\n   */\n  generate<\n    Output extends JSONSchema7 | ZodSchema | undefined = undefined,\n    StructuredOutput extends JSONSchema7 | ZodSchema | undefined = undefined,\n  >(params: GenerateParams<Output>): Promise<GenerateReturn<any, Output, StructuredOutput>> {\n    const processedParams = {\n      ...params,\n      output: zodToJsonSchema(params.output),\n      experimental_output: zodToJsonSchema(params.experimental_output),\n    };\n\n    return this.request(`/api/networks/${this.networkId}/generate`, {\n      method: 'POST',\n      body: processedParams,\n    });\n  }\n\n  /**\n   * Streams a response from the agent\n   * @param params - Stream parameters including prompt\n   * @returns Promise containing the enhanced Response object with processDataStream method\n   */\n  async stream<T extends JSONSchema7 | ZodSchema | undefined = undefined>(\n    params: StreamParams<T>,\n  ): Promise<\n    Response & {\n      processDataStream: (options?: Omit<Parameters<typeof processDataStream>[0], 'stream'>) => Promise<void>;\n    }\n  > {\n    const processedParams = {\n      ...params,\n      output: zodToJsonSchema(params.output),\n      experimental_output: zodToJsonSchema(params.experimental_output),\n    };\n\n    const response: Response & {\n      processDataStream: (options?: Omit<Parameters<typeof processDataStream>[0], 'stream'>) => Promise<void>;\n    } = await this.request(`/api/networks/${this.networkId}/stream`, {\n      method: 'POST',\n      body: processedParams,\n      stream: true,\n    });\n\n    if (!response.body) {\n      throw new Error('No response body');\n    }\n\n    response.processDataStream = async (options = {}) => {\n      await processDataStream({\n        stream: response.body as ReadableStream<Uint8Array>,\n        ...options,\n      });\n    };\n\n    return response;\n  }\n}\n","import type { StorageThreadType } from '@mastra/core';\n\nimport type {\n  GetMemoryThreadMessagesResponse,\n  ClientOptions,\n  UpdateMemoryThreadParams,\n  GetMemoryThreadMessagesParams,\n  GetMemoryThreadMessagesPaginatedParams,\n  GetMemoryThreadMessagesPaginatedResponse,\n} from '../types';\n\nimport { BaseResource } from './base';\n\nexport class MemoryThread extends BaseResource {\n  constructor(\n    options: ClientOptions,\n    private threadId: string,\n    private agentId: string,\n  ) {\n    super(options);\n  }\n\n  /**\n   * Retrieves the memory thread details\n   * @returns Promise containing thread details including title and metadata\n   */\n  get(): Promise<StorageThreadType> {\n    return this.request(`/api/memory/threads/${this.threadId}?agentId=${this.agentId}`);\n  }\n\n  /**\n   * Updates the memory thread properties\n   * @param params - Update parameters including title and metadata\n   * @returns Promise containing updated thread details\n   */\n  update(params: UpdateMemoryThreadParams): Promise<StorageThreadType> {\n    return this.request(`/api/memory/threads/${this.threadId}?agentId=${this.agentId}`, {\n      method: 'PATCH',\n      body: params,\n    });\n  }\n\n  /**\n   * Deletes the memory thread\n   * @returns Promise containing deletion result\n   */\n  delete(): Promise<{ result: string }> {\n    return this.request(`/api/memory/threads/${this.threadId}?agentId=${this.agentId}`, {\n      method: 'DELETE',\n    });\n  }\n\n  /**\n   * Retrieves messages associated with the thread\n   * @param params - Optional parameters including limit for number of messages to retrieve\n   * @returns Promise containing thread messages and UI messages\n   */\n  getMessages(params?: GetMemoryThreadMessagesParams): Promise<GetMemoryThreadMessagesResponse> {\n    const query = new URLSearchParams({\n      agentId: this.agentId,\n      ...(params?.limit ? { limit: params.limit.toString() } : {}),\n    });\n    return this.request(`/api/memory/threads/${this.threadId}/messages?${query.toString()}`);\n  }\n\n  /**\n   * Retrieves paginated messages associated with the thread with advanced filtering and selection options\n   * @param params - Pagination parameters including selectBy criteria, page, perPage, date ranges, and message inclusion options\n   * @returns Promise containing paginated thread messages with pagination metadata (total, page, perPage, hasMore)\n   */\n  getMessagesPaginated({\n    selectBy,\n    ...rest\n  }: GetMemoryThreadMessagesPaginatedParams): Promise<GetMemoryThreadMessagesPaginatedResponse> {\n    const query = new URLSearchParams({\n      ...rest,\n      ...(selectBy ? { selectBy: JSON.stringify(selectBy) } : {}),\n    });\n    return this.request(`/api/memory/threads/${this.threadId}/messages/paginated?${query.toString()}`);\n  }\n\n  /**\n   * Deletes one or more messages from the thread\n   * @param messageIds - Can be a single message ID (string), array of message IDs,\n   *                     message object with id property, or array of message objects\n   * @returns Promise containing deletion result\n   */\n  deleteMessages(\n    messageIds: string | string[] | { id: string } | { id: string }[],\n  ): Promise<{ success: boolean; message: string }> {\n    const query = new URLSearchParams({\n      agentId: this.agentId,\n    });\n    return this.request(`/api/memory/messages/delete?${query.toString()}`, {\n      method: 'POST',\n      body: { messageIds },\n    });\n  }\n}\n","import type {\n  CreateIndexParams,\n  GetVectorIndexResponse,\n  QueryVectorParams,\n  QueryVectorResponse,\n  ClientOptions,\n  UpsertVectorParams,\n} from '../types';\n\nimport { BaseResource } from './base';\n\nexport class Vector extends BaseResource {\n  constructor(\n    options: ClientOptions,\n    private vectorName: string,\n  ) {\n    super(options);\n  }\n\n  /**\n   * Retrieves details about a specific vector index\n   * @param indexName - Name of the index to get details for\n   * @returns Promise containing vector index details\n   */\n  details(indexName: string): Promise<GetVectorIndexResponse> {\n    return this.request(`/api/vector/${this.vectorName}/indexes/${indexName}`);\n  }\n\n  /**\n   * Deletes a vector index\n   * @param indexName - Name of the index to delete\n   * @returns Promise indicating deletion success\n   */\n  delete(indexName: string): Promise<{ success: boolean }> {\n    return this.request(`/api/vector/${this.vectorName}/indexes/${indexName}`, {\n      method: 'DELETE',\n    });\n  }\n\n  /**\n   * Retrieves a list of all available indexes\n   * @returns Promise containing array of index names\n   */\n  getIndexes(): Promise<{ indexes: string[] }> {\n    return this.request(`/api/vector/${this.vectorName}/indexes`);\n  }\n\n  /**\n   * Creates a new vector index\n   * @param params - Parameters for index creation including dimension and metric\n   * @returns Promise indicating creation success\n   */\n  createIndex(params: CreateIndexParams): Promise<{ success: boolean }> {\n    return this.request(`/api/vector/${this.vectorName}/create-index`, {\n      method: 'POST',\n      body: params,\n    });\n  }\n\n  /**\n   * Upserts vectors into an index\n   * @param params - Parameters containing vectors, metadata, and optional IDs\n   * @returns Promise containing array of vector IDs\n   */\n  upsert(params: UpsertVectorParams): Promise<string[]> {\n    return this.request(`/api/vector/${this.vectorName}/upsert`, {\n      method: 'POST',\n      body: params,\n    });\n  }\n\n  /**\n   * Queries vectors in an index\n   * @param params - Query parameters including query vector and search options\n   * @returns Promise containing query results\n   */\n  query(params: QueryVectorParams): Promise<QueryVectorResponse> {\n    return this.request(`/api/vector/${this.vectorName}/query`, {\n      method: 'POST',\n      body: params,\n    });\n  }\n}\n","import type {\n  ClientOptions,\n  LegacyWorkflowRunResult,\n  GetLegacyWorkflowRunsResponse,\n  GetWorkflowRunsParams,\n  GetLegacyWorkflowResponse,\n} from '../types';\n\nimport { BaseResource } from './base';\n\nconst RECORD_SEPARATOR = '\\x1E';\n\nexport class LegacyWorkflow extends BaseResource {\n  constructor(\n    options: ClientOptions,\n    private workflowId: string,\n  ) {\n    super(options);\n  }\n\n  /**\n   * Retrieves details about the legacy workflow\n   * @returns Promise containing legacy workflow details including steps and graphs\n   */\n  details(): Promise<GetLegacyWorkflowResponse> {\n    return this.request(`/api/workflows/legacy/${this.workflowId}`);\n  }\n\n  /**\n   * Retrieves all runs for a legacy workflow\n   * @param params - Parameters for filtering runs\n   * @returns Promise containing legacy workflow runs array\n   */\n  runs(params?: GetWorkflowRunsParams): Promise<GetLegacyWorkflowRunsResponse> {\n    const searchParams = new URLSearchParams();\n    if (params?.fromDate) {\n      searchParams.set('fromDate', params.fromDate.toISOString());\n    }\n    if (params?.toDate) {\n      searchParams.set('toDate', params.toDate.toISOString());\n    }\n    if (params?.limit) {\n      searchParams.set('limit', String(params.limit));\n    }\n    if (params?.offset) {\n      searchParams.set('offset', String(params.offset));\n    }\n    if (params?.resourceId) {\n      searchParams.set('resourceId', params.resourceId);\n    }\n\n    if (searchParams.size) {\n      return this.request(`/api/workflows/legacy/${this.workflowId}/runs?${searchParams}`);\n    } else {\n      return this.request(`/api/workflows/legacy/${this.workflowId}/runs`);\n    }\n  }\n\n  /**\n   * Creates a new legacy workflow run\n   * @returns Promise containing the generated run ID\n   */\n  createRun(params?: { runId?: string }): Promise<{ runId: string }> {\n    const searchParams = new URLSearchParams();\n\n    if (!!params?.runId) {\n      searchParams.set('runId', params.runId);\n    }\n\n    return this.request(`/api/workflows/legacy/${this.workflowId}/create-run?${searchParams.toString()}`, {\n      method: 'POST',\n    });\n  }\n\n  /**\n   * Starts a legacy workflow run synchronously without waiting for the workflow to complete\n   * @param params - Object containing the runId and triggerData\n   * @returns Promise containing success message\n   */\n  start(params: { runId: string; triggerData: Record<string, any> }): Promise<{ message: string }> {\n    return this.request(`/api/workflows/legacy/${this.workflowId}/start?runId=${params.runId}`, {\n      method: 'POST',\n      body: params?.triggerData,\n    });\n  }\n\n  /**\n   * Resumes a suspended legacy workflow step synchronously without waiting for the workflow to complete\n   * @param stepId - ID of the step to resume\n   * @param runId - ID of the legacy workflow run\n   * @param context - Context to resume the legacy workflow with\n   * @returns Promise containing the legacy workflow resume results\n   */\n  resume({\n    stepId,\n    runId,\n    context,\n  }: {\n    stepId: string;\n    runId: string;\n    context: Record<string, any>;\n  }): Promise<{ message: string }> {\n    return this.request(`/api/workflows/legacy/${this.workflowId}/resume?runId=${runId}`, {\n      method: 'POST',\n      body: {\n        stepId,\n        context,\n      },\n    });\n  }\n\n  /**\n   * Starts a workflow run asynchronously and returns a promise that resolves when the workflow is complete\n   * @param params - Object containing the optional runId and triggerData\n   * @returns Promise containing the workflow execution results\n   */\n  startAsync(params: { runId?: string; triggerData: Record<string, any> }): Promise<LegacyWorkflowRunResult> {\n    const searchParams = new URLSearchParams();\n\n    if (!!params?.runId) {\n      searchParams.set('runId', params.runId);\n    }\n\n    return this.request(`/api/workflows/legacy/${this.workflowId}/start-async?${searchParams.toString()}`, {\n      method: 'POST',\n      body: params?.triggerData,\n    });\n  }\n\n  /**\n   * Resumes a suspended legacy workflow step asynchronously and returns a promise that resolves when the workflow is complete\n   * @param params - Object containing the runId, stepId, and context\n   * @returns Promise containing the workflow resume results\n   */\n  resumeAsync(params: {\n    runId: string;\n    stepId: string;\n    context: Record<string, any>;\n  }): Promise<LegacyWorkflowRunResult> {\n    return this.request(`/api/workflows/legacy/${this.workflowId}/resume-async?runId=${params.runId}`, {\n      method: 'POST',\n      body: {\n        stepId: params.stepId,\n        context: params.context,\n      },\n    });\n  }\n\n  /**\n   * Creates an async generator that processes a readable stream and yields records\n   * separated by the Record Separator character (\\x1E)\n   *\n   * @param stream - The readable stream to process\n   * @returns An async generator that yields parsed records\n   */\n  private async *streamProcessor(stream: ReadableStream): AsyncGenerator<LegacyWorkflowRunResult, void, unknown> {\n    const reader = stream.getReader();\n\n    // Track if we've finished reading from the stream\n    let doneReading = false;\n    // Buffer to accumulate partial chunks\n    let buffer = '';\n\n    try {\n      while (!doneReading) {\n        // Read the next chunk from the stream\n        const { done, value } = await reader.read();\n        doneReading = done;\n\n        // Skip processing if we're done and there's no value\n        if (done && !value) continue;\n\n        try {\n          // Decode binary data to text\n          const decoded = value ? new TextDecoder().decode(value) : '';\n\n          // Split the combined buffer and new data by record separator\n          const chunks = (buffer + decoded).split(RECORD_SEPARATOR);\n\n          // The last chunk might be incomplete, so save it for the next iteration\n          buffer = chunks.pop() || '';\n\n          // Process complete chunks\n          for (const chunk of chunks) {\n            if (chunk) {\n              // Only process non-empty chunks\n              if (typeof chunk === 'string') {\n                try {\n                  const parsedChunk = JSON.parse(chunk);\n                  yield parsedChunk;\n                } catch {\n                  // Silently ignore parsing errors to maintain stream processing\n                  // This allows the stream to continue even if one record is malformed\n                }\n              }\n            }\n          }\n        } catch {\n          // Silently ignore parsing errors to maintain stream processing\n          // This allows the stream to continue even if one record is malformed\n        }\n      }\n\n      // Process any remaining data in the buffer after stream is done\n      if (buffer) {\n        try {\n          yield JSON.parse(buffer);\n        } catch {\n          // Ignore parsing error for final chunk\n        }\n      }\n    } finally {\n      // Always ensure we clean up the reader\n      reader.cancel().catch(() => {\n        // Ignore cancel errors\n      });\n    }\n  }\n\n  /**\n   * Watches legacy workflow transitions in real-time\n   * @param runId - Optional run ID to filter the watch stream\n   * @returns AsyncGenerator that yields parsed records from the legacy workflow watch stream\n   */\n  async watch({ runId }: { runId?: string }, onRecord: (record: LegacyWorkflowRunResult) => void) {\n    const response: Response = await this.request(`/api/workflows/legacy/${this.workflowId}/watch?runId=${runId}`, {\n      stream: true,\n    });\n\n    if (!response.ok) {\n      throw new Error(`Failed to watch legacy workflow: ${response.statusText}`);\n    }\n\n    if (!response.body) {\n      throw new Error('Response body is null');\n    }\n\n    for await (const record of this.streamProcessor(response.body)) {\n      onRecord(record);\n    }\n  }\n}\n","import type { RuntimeContext } from '@mastra/core/runtime-context';\nimport type { GetToolResponse, ClientOptions } from '../types';\n\nimport { BaseResource } from './base';\nimport { parseClientRuntimeContext } from '../utils';\n\nexport class Tool extends BaseResource {\n  constructor(\n    options: ClientOptions,\n    private toolId: string,\n  ) {\n    super(options);\n  }\n\n  /**\n   * Retrieves details about the tool\n   * @returns Promise containing tool details including description and schemas\n   */\n  details(): Promise<GetToolResponse> {\n    return this.request(`/api/tools/${this.toolId}`);\n  }\n\n  /**\n   * Executes the tool with the provided parameters\n   * @param params - Parameters required for tool execution\n   * @returns Promise containing the tool execution results\n   */\n  execute(params: { data: any; runId?: string; runtimeContext?: RuntimeContext | Record<string, any> }): Promise<any> {\n    const url = new URLSearchParams();\n\n    if (params.runId) {\n      url.set('runId', params.runId);\n    }\n\n    const body = {\n      data: params.data,\n      runtimeContext: parseClientRuntimeContext(params.runtimeContext),\n    };\n\n    return this.request(`/api/tools/${this.toolId}/execute?${url.toString()}`, {\n      method: 'POST',\n      body,\n    });\n  }\n}\n","import type { RuntimeContext } from '@mastra/core/runtime-context';\nimport type {\n  ClientOptions,\n  GetWorkflowResponse,\n  GetWorkflowRunsResponse,\n  GetWorkflowRunsParams,\n  WorkflowRunResult,\n  WorkflowWatchResult,\n  GetWorkflowRunByIdResponse,\n  GetWorkflowRunExecutionResultResponse,\n} from '../types';\n\nimport { parseClientRuntimeContext } from '../utils';\nimport { BaseResource } from './base';\n\nconst RECORD_SEPARATOR = '\\x1E';\n\nexport class Workflow extends BaseResource {\n  constructor(\n    options: ClientOptions,\n    private workflowId: string,\n  ) {\n    super(options);\n  }\n\n  /**\n   * Creates an async generator that processes a readable stream and yields workflow records\n   * separated by the Record Separator character (\\x1E)\n   *\n   * @param stream - The readable stream to process\n   * @returns An async generator that yields parsed records\n   */\n  private async *streamProcessor(stream: ReadableStream): AsyncGenerator<WorkflowWatchResult, void, unknown> {\n    const reader = stream.getReader();\n\n    // Track if we've finished reading from the stream\n    let doneReading = false;\n    // Buffer to accumulate partial chunks\n    let buffer = '';\n\n    try {\n      while (!doneReading) {\n        // Read the next chunk from the stream\n        const { done, value } = await reader.read();\n        doneReading = done;\n\n        // Skip processing if we're done and there's no value\n        if (done && !value) continue;\n\n        try {\n          // Decode binary data to text\n          const decoded = value ? new TextDecoder().decode(value) : '';\n\n          // Split the combined buffer and new data by record separator\n          const chunks = (buffer + decoded).split(RECORD_SEPARATOR);\n\n          // The last chunk might be incomplete, so save it for the next iteration\n          buffer = chunks.pop() || '';\n\n          // Process complete chunks\n          for (const chunk of chunks) {\n            if (chunk) {\n              // Only process non-empty chunks\n              if (typeof chunk === 'string') {\n                try {\n                  const parsedChunk = JSON.parse(chunk);\n                  yield parsedChunk;\n                } catch {\n                  // Silently ignore parsing errors to maintain stream processing\n                  // This allows the stream to continue even if one record is malformed\n                }\n              }\n            }\n          }\n        } catch {\n          // Silently ignore parsing errors to maintain stream processing\n          // This allows the stream to continue even if one record is malformed\n        }\n      }\n\n      // Process any remaining data in the buffer after stream is done\n      if (buffer) {\n        try {\n          yield JSON.parse(buffer);\n        } catch {\n          // Ignore parsing error for final chunk\n        }\n      }\n    } finally {\n      // Always ensure we clean up the reader\n      reader.cancel().catch(() => {\n        // Ignore cancel errors\n      });\n    }\n  }\n\n  /**\n   * Retrieves details about the workflow\n   * @returns Promise containing workflow details including steps and graphs\n   */\n  details(): Promise<GetWorkflowResponse> {\n    return this.request(`/api/workflows/${this.workflowId}`);\n  }\n\n  /**\n   * Retrieves all runs for a workflow\n   * @param params - Parameters for filtering runs\n   * @returns Promise containing workflow runs array\n   */\n  runs(params?: GetWorkflowRunsParams): Promise<GetWorkflowRunsResponse> {\n    const searchParams = new URLSearchParams();\n    if (params?.fromDate) {\n      searchParams.set('fromDate', params.fromDate.toISOString());\n    }\n    if (params?.toDate) {\n      searchParams.set('toDate', params.toDate.toISOString());\n    }\n    if (params?.limit !== null && params?.limit !== undefined && !isNaN(Number(params?.limit))) {\n      searchParams.set('limit', String(params.limit));\n    }\n    if (params?.offset !== null && params?.offset !== undefined && !isNaN(Number(params?.offset))) {\n      searchParams.set('offset', String(params.offset));\n    }\n    if (params?.resourceId) {\n      searchParams.set('resourceId', params.resourceId);\n    }\n\n    if (searchParams.size) {\n      return this.request(`/api/workflows/${this.workflowId}/runs?${searchParams}`);\n    } else {\n      return this.request(`/api/workflows/${this.workflowId}/runs`);\n    }\n  }\n\n  /**\n   * Retrieves a specific workflow run by its ID\n   * @param runId - The ID of the workflow run to retrieve\n   * @returns Promise containing the workflow run details\n   */\n  runById(runId: string): Promise<GetWorkflowRunByIdResponse> {\n    return this.request(`/api/workflows/${this.workflowId}/runs/${runId}`);\n  }\n\n  /**\n   * Retrieves the execution result for a specific workflow run by its ID\n   * @param runId - The ID of the workflow run to retrieve the execution result for\n   * @returns Promise containing the workflow run execution result\n   */\n  runExecutionResult(runId: string): Promise<GetWorkflowRunExecutionResultResponse> {\n    return this.request(`/api/workflows/${this.workflowId}/runs/${runId}/execution-result`);\n  }\n\n  /**\n   * Cancels a specific workflow run by its ID\n   * @param runId - The ID of the workflow run to cancel\n   * @returns Promise containing a success message\n   */\n  cancelRun(runId: string): Promise<{ message: string }> {\n    return this.request(`/api/workflows/${this.workflowId}/runs/${runId}/cancel`, {\n      method: 'POST',\n    });\n  }\n\n  /**\n   * Sends an event to a specific workflow run by its ID\n   * @param params - Object containing the runId, event and data\n   * @returns Promise containing a success message\n   */\n  sendRunEvent(params: { runId: string; event: string; data: unknown }): Promise<{ message: string }> {\n    return this.request(`/api/workflows/${this.workflowId}/runs/${params.runId}/send-event`, {\n      method: 'POST',\n      body: { event: params.event, data: params.data },\n    });\n  }\n\n  /**\n   * Creates a new workflow run\n   * @param params - Optional object containing the optional runId\n   * @returns Promise containing the runId of the created run\n   */\n  createRun(params?: { runId?: string }): Promise<{ runId: string }> {\n    const searchParams = new URLSearchParams();\n\n    if (!!params?.runId) {\n      searchParams.set('runId', params.runId);\n    }\n\n    return this.request(`/api/workflows/${this.workflowId}/create-run?${searchParams.toString()}`, {\n      method: 'POST',\n    });\n  }\n\n  /**\n   * Creates a new workflow run (alias for createRun)\n   * @param params - Optional object containing the optional runId\n   * @returns Promise containing the runId of the created run\n   */\n  createRunAsync(params?: { runId?: string }): Promise<{ runId: string }> {\n    return this.createRun(params);\n  }\n\n  /**\n   * Starts a workflow run synchronously without waiting for the workflow to complete\n   * @param params - Object containing the runId, inputData and runtimeContext\n   * @returns Promise containing success message\n   */\n  start(params: {\n    runId: string;\n    inputData: Record<string, any>;\n    runtimeContext?: RuntimeContext | Record<string, any>;\n  }): Promise<{ message: string }> {\n    const runtimeContext = parseClientRuntimeContext(params.runtimeContext);\n    return this.request(`/api/workflows/${this.workflowId}/start?runId=${params.runId}`, {\n      method: 'POST',\n      body: { inputData: params?.inputData, runtimeContext },\n    });\n  }\n\n  /**\n   * Resumes a suspended workflow step synchronously without waiting for the workflow to complete\n   * @param params - Object containing the runId, step, resumeData and runtimeContext\n   * @returns Promise containing success message\n   */\n  resume({\n    step,\n    runId,\n    resumeData,\n    ...rest\n  }: {\n    step: string | string[];\n    runId: string;\n    resumeData?: Record<string, any>;\n    runtimeContext?: RuntimeContext | Record<string, any>;\n  }): Promise<{ message: string }> {\n    const runtimeContext = parseClientRuntimeContext(rest.runtimeContext);\n    return this.request(`/api/workflows/${this.workflowId}/resume?runId=${runId}`, {\n      method: 'POST',\n      stream: true,\n      body: {\n        step,\n        resumeData,\n        runtimeContext,\n      },\n    });\n  }\n\n  /**\n   * Starts a workflow run asynchronously and returns a promise that resolves when the workflow is complete\n   * @param params - Object containing the optional runId, inputData and runtimeContext\n   * @returns Promise containing the workflow execution results\n   */\n  startAsync(params: {\n    runId?: string;\n    inputData: Record<string, any>;\n    runtimeContext?: RuntimeContext | Record<string, any>;\n  }): Promise<WorkflowRunResult> {\n    const searchParams = new URLSearchParams();\n\n    if (!!params?.runId) {\n      searchParams.set('runId', params.runId);\n    }\n\n    const runtimeContext = parseClientRuntimeContext(params.runtimeContext);\n\n    return this.request(`/api/workflows/${this.workflowId}/start-async?${searchParams.toString()}`, {\n      method: 'POST',\n      body: { inputData: params.inputData, runtimeContext },\n    });\n  }\n\n  /**\n   * Starts a workflow run and returns a stream\n   * @param params - Object containing the optional runId, inputData and runtimeContext\n   * @returns Promise containing the workflow execution results\n   */\n  async stream(params: { runId?: string; inputData: Record<string, any>; runtimeContext?: RuntimeContext }) {\n    const searchParams = new URLSearchParams();\n\n    if (!!params?.runId) {\n      searchParams.set('runId', params.runId);\n    }\n\n    const runtimeContext = parseClientRuntimeContext(params.runtimeContext);\n    const response: Response = await this.request(\n      `/api/workflows/${this.workflowId}/stream?${searchParams.toString()}`,\n      {\n        method: 'POST',\n        body: { inputData: params.inputData, runtimeContext },\n        stream: true,\n      },\n    );\n\n    if (!response.ok) {\n      throw new Error(`Failed to stream vNext workflow: ${response.statusText}`);\n    }\n\n    if (!response.body) {\n      throw new Error('Response body is null');\n    }\n\n    //using undefined instead of empty string to avoid parsing errors\n    let failedChunk: string | undefined = undefined;\n\n    // Create a transform stream that processes the response body\n    const transformStream = new TransformStream<ArrayBuffer, { type: string; payload: any }>({\n      start() {},\n      async transform(chunk, controller) {\n        try {\n          // Decode binary data to text\n          const decoded = new TextDecoder().decode(chunk);\n\n          // Split by record separator\n          const chunks = decoded.split(RECORD_SEPARATOR);\n\n          // Process each chunk\n          for (const chunk of chunks) {\n            if (chunk) {\n              const newChunk: string = failedChunk ? failedChunk + chunk : chunk;\n              try {\n                const parsedChunk = JSON.parse(newChunk);\n                controller.enqueue(parsedChunk);\n                failedChunk = undefined;\n              } catch (error) {\n                failedChunk = newChunk;\n              }\n            }\n          }\n        } catch {\n          // Silently ignore processing errors\n        }\n      },\n    });\n\n    // Pipe the response body through the transform stream\n    return response.body.pipeThrough(transformStream);\n  }\n\n  /**\n   * Resumes a suspended workflow step asynchronously and returns a promise that resolves when the workflow is complete\n   * @param params - Object containing the runId, step, resumeData and runtimeContext\n   * @returns Promise containing the workflow resume results\n   */\n  resumeAsync(params: {\n    runId: string;\n    step: string | string[];\n    resumeData?: Record<string, any>;\n    runtimeContext?: RuntimeContext | Record<string, any>;\n  }): Promise<WorkflowRunResult> {\n    const runtimeContext = parseClientRuntimeContext(params.runtimeContext);\n    return this.request(`/api/workflows/${this.workflowId}/resume-async?runId=${params.runId}`, {\n      method: 'POST',\n      body: {\n        step: params.step,\n        resumeData: params.resumeData,\n        runtimeContext,\n      },\n    });\n  }\n\n  /**\n   * Watches workflow transitions in real-time\n   * @param runId - Optional run ID to filter the watch stream\n   * @returns AsyncGenerator that yields parsed records from the workflow watch stream\n   */\n  async watch({ runId }: { runId?: string }, onRecord: (record: WorkflowWatchResult) => void) {\n    const response: Response = await this.request(`/api/workflows/${this.workflowId}/watch?runId=${runId}`, {\n      stream: true,\n    });\n\n    if (!response.ok) {\n      throw new Error(`Failed to watch workflow: ${response.statusText}`);\n    }\n\n    if (!response.body) {\n      throw new Error('Response body is null');\n    }\n\n    for await (const record of this.streamProcessor(response.body)) {\n      if (typeof record === 'string') {\n        onRecord(JSON.parse(record));\n      } else {\n        onRecord(record);\n      }\n    }\n  }\n\n  /**\n   * Creates a new ReadableStream from an iterable or async iterable of objects,\n   * serializing each as JSON and separating them with the record separator (\\x1E).\n   *\n   * @param records - An iterable or async iterable of objects to stream\n   * @returns A ReadableStream emitting the records as JSON strings separated by the record separator\n   */\n  static createRecordStream(records: Iterable<any> | AsyncIterable<any>): ReadableStream {\n    const encoder = new TextEncoder();\n    return new ReadableStream({\n      async start(controller) {\n        try {\n          for await (const record of records as AsyncIterable<any>) {\n            const json = JSON.stringify(record) + RECORD_SEPARATOR;\n            controller.enqueue(encoder.encode(json));\n          }\n          controller.close();\n        } catch (err) {\n          controller.error(err);\n        }\n      },\n    });\n  }\n}\n","import type {\n  AgentCard,\n  GetTaskResponse,\n  MessageSendParams,\n  SendMessageResponse,\n  SendStreamingMessageResponse,\n  Task,\n  TaskQueryParams,\n} from '@mastra/core/a2a';\nimport type { ClientOptions } from '../types';\nimport { BaseResource } from './base';\n\n/**\n * Class for interacting with an agent via the A2A protocol\n */\nexport class A2A extends BaseResource {\n  constructor(\n    options: ClientOptions,\n    private agentId: string,\n  ) {\n    super(options);\n  }\n\n  /**\n   * Get the agent card with metadata about the agent\n   * @returns Promise containing the agent card information\n   */\n  async getCard(): Promise<AgentCard> {\n    return this.request(`/.well-known/${this.agentId}/agent-card.json`);\n  }\n\n  /**\n   * Send a message to the agent and gets a message or task response\n   * @param params - Parameters for the task\n   * @returns Promise containing the response\n   */\n  async sendMessage(params: MessageSendParams): Promise<SendMessageResponse> {\n    const response = await this.request<SendMessageResponse>(`/a2a/${this.agentId}`, {\n      method: 'POST',\n      body: {\n        method: 'message/send',\n        params,\n      },\n    });\n\n    return response;\n  }\n\n  /**\n   * Sends a message to an agent to initiate/continue a task and subscribes\n   * the client to real-time updates for that task via Server-Sent Events (SSE).\n   * @param params - Parameters for the task\n   * @returns A stream of Server-Sent Events. Each SSE `data` field contains a `SendStreamingMessageResponse`\n   */\n  async sendStreamingMessage(params: MessageSendParams): Promise<AsyncIterable<SendStreamingMessageResponse>> {\n    const response = await this.request<AsyncIterable<SendStreamingMessageResponse>>(`/a2a/${this.agentId}`, {\n      method: 'POST',\n      body: {\n        method: 'message/stream',\n        params,\n      },\n    });\n\n    return response;\n  }\n\n  /**\n   * Get the status and result of a task\n   * @param params - Parameters for querying the task\n   * @returns Promise containing the task response\n   */\n  async getTask(params: TaskQueryParams): Promise<GetTaskResponse> {\n    const response = await this.request<GetTaskResponse>(`/a2a/${this.agentId}`, {\n      method: 'POST',\n      body: {\n        method: 'tasks/get',\n        params,\n      },\n    });\n\n    return response;\n  }\n\n  /**\n   * Cancel a running task\n   * @param params - Parameters identifying the task to cancel\n   * @returns Promise containing the task response\n   */\n  async cancelTask(params: TaskQueryParams): Promise<Task> {\n    return this.request(`/a2a/${this.agentId}`, {\n      method: 'POST',\n      body: {\n        method: 'tasks/cancel',\n        params,\n      },\n    });\n  }\n}\n","import type { RuntimeContext } from '@mastra/core/runtime-context';\nimport type { ClientOptions, McpToolInfo } from '../types';\nimport { BaseResource } from './base';\n\n/**\n * Represents a specific tool available on a specific MCP server.\n * Provides methods to get details and execute the tool.\n */\nexport class MCPTool extends BaseResource {\n  private serverId: string;\n  private toolId: string;\n\n  constructor(options: ClientOptions, serverId: string, toolId: string) {\n    super(options);\n    this.serverId = serverId;\n    this.toolId = toolId;\n  }\n\n  /**\n   * Retrieves details about this specific tool from the MCP server.\n   * @returns Promise containing the tool's information (name, description, schema).\n   */\n  details(): Promise<McpToolInfo> {\n    return this.request(`/api/mcp/${this.serverId}/tools/${this.toolId}`);\n  }\n\n  /**\n   * Executes this specific tool on the MCP server.\n   * @param params - Parameters for tool execution, including data/args and optional runtimeContext.\n   * @returns Promise containing the result of the tool execution.\n   */\n  execute(params: { data?: any; runtimeContext?: RuntimeContext }): Promise<any> {\n    const body: any = {};\n    if (params.data !== undefined) body.data = params.data;\n    // If none of data, args the body might be empty or just contain runtimeContext.\n    // The handler will look for these, so an empty args object might be appropriate if that's the intent.\n    // else body.data = {}; // Or let it be empty if no specific input fields are used\n\n    if (params.runtimeContext !== undefined) {\n      body.runtimeContext = params.runtimeContext;\n    }\n\n    return this.request(`/api/mcp/${this.serverId}/tools/${this.toolId}/execute`, {\n      method: 'POST',\n      body: Object.keys(body).length > 0 ? body : undefined,\n    });\n  }\n}\n","import type { StorageThreadType } from '@mastra/core';\n\nimport type {\n  GetMemoryThreadMessagesResponse,\n  ClientOptions,\n  UpdateMemoryThreadParams,\n  GetMemoryThreadMessagesParams,\n} from '../types';\n\nimport { BaseResource } from './base';\n\nexport class NetworkMemoryThread extends BaseResource {\n  constructor(\n    options: ClientOptions,\n    private threadId: string,\n    private networkId: string,\n  ) {\n    super(options);\n  }\n\n  /**\n   * Retrieves the memory thread details\n   * @returns Promise containing thread details including title and metadata\n   */\n  get(): Promise<StorageThreadType> {\n    return this.request(`/api/memory/network/threads/${this.threadId}?networkId=${this.networkId}`);\n  }\n\n  /**\n   * Updates the memory thread properties\n   * @param params - Update parameters including title and metadata\n   * @returns Promise containing updated thread details\n   */\n  update(params: UpdateMemoryThreadParams): Promise<StorageThreadType> {\n    return this.request(`/api/memory/network/threads/${this.threadId}?networkId=${this.networkId}`, {\n      method: 'PATCH',\n      body: params,\n    });\n  }\n\n  /**\n   * Deletes the memory thread\n   * @returns Promise containing deletion result\n   */\n  delete(): Promise<{ result: string }> {\n    return this.request(`/api/memory/network/threads/${this.threadId}?networkId=${this.networkId}`, {\n      method: 'DELETE',\n    });\n  }\n\n  /**\n   * Retrieves messages associated with the thread\n   * @param params - Optional parameters including limit for number of messages to retrieve\n   * @returns Promise containing thread messages and UI messages\n   */\n  getMessages(params?: GetMemoryThreadMessagesParams): Promise<GetMemoryThreadMessagesResponse> {\n    const query = new URLSearchParams({\n      networkId: this.networkId,\n      ...(params?.limit ? { limit: params.limit.toString() } : {}),\n    });\n    return this.request(`/api/memory/network/threads/${this.threadId}/messages?${query.toString()}`);\n  }\n\n  /**\n   * Deletes one or more messages from the thread\n   * @param messageIds - Can be a single message ID (string), array of message IDs,\n   *                     message object with id property, or array of message objects\n   * @returns Promise containing deletion result\n   */\n  deleteMessages(\n    messageIds: string | string[] | { id: string } | { id: string }[],\n  ): Promise<{ success: boolean; message: string }> {\n    const query = new URLSearchParams({\n      networkId: this.networkId,\n    });\n    return this.request(`/api/memory/network/messages/delete?${query.toString()}`, {\n      method: 'POST',\n      body: { messageIds },\n    });\n  }\n}\n","import type { WatchEvent } from '@mastra/core/workflows';\n\nimport type {\n  ClientOptions,\n  GetVNextNetworkResponse,\n  GenerateVNextNetworkResponse,\n  LoopVNextNetworkResponse,\n  GenerateOrStreamVNextNetworkParams,\n  LoopStreamVNextNetworkParams,\n} from '../types';\n\nimport { BaseResource } from './base';\nimport { parseClientRuntimeContext } from '../utils';\nimport type { RuntimeContext } from '@mastra/core/runtime-context';\n\nconst RECORD_SEPARATOR = '\\x1E';\n\nexport class VNextNetwork extends BaseResource {\n  constructor(\n    options: ClientOptions,\n    private networkId: string,\n  ) {\n    super(options);\n  }\n\n  /**\n   * Retrieves details about the network\n   * @returns Promise containing vNext network details\n   */\n  details(): Promise<GetVNextNetworkResponse> {\n    return this.request(`/api/networks/v-next/${this.networkId}`);\n  }\n\n  /**\n   * Generates a response from the v-next network\n   * @param params - Generation parameters including message\n   * @returns Promise containing the generated response\n   */\n  generate(params: GenerateOrStreamVNextNetworkParams): Promise<GenerateVNextNetworkResponse> {\n    return this.request(`/api/networks/v-next/${this.networkId}/generate`, {\n      method: 'POST',\n      body: {\n        ...params,\n        runtimeContext: parseClientRuntimeContext(params.runtimeContext),\n      },\n    });\n  }\n\n  /**\n   * Generates a response from the v-next network using multiple primitives\n   * @param params - Generation parameters including message\n   * @returns Promise containing the generated response\n   */\n  loop(params: {\n    message: string;\n    runtimeContext?: RuntimeContext | Record<string, any>;\n  }): Promise<LoopVNextNetworkResponse> {\n    return this.request(`/api/networks/v-next/${this.networkId}/loop`, {\n      method: 'POST',\n      body: {\n        ...params,\n        runtimeContext: parseClientRuntimeContext(params.runtimeContext),\n      },\n    });\n  }\n\n  private async *streamProcessor(stream: ReadableStream): AsyncGenerator<WatchEvent, void, unknown> {\n    const reader = stream.getReader();\n\n    // Track if we've finished reading from the stream\n    let doneReading = false;\n    // Buffer to accumulate partial chunks\n    let buffer = '';\n\n    try {\n      while (!doneReading) {\n        // Read the next chunk from the stream\n        const { done, value } = await reader.read();\n        doneReading = done;\n\n        // Skip processing if we're done and there's no value\n        if (done && !value) continue;\n\n        try {\n          // Decode binary data to text\n          const decoded = value ? new TextDecoder().decode(value) : '';\n\n          // Split the combined buffer and new data by record separator\n          const chunks = (buffer + decoded).split(RECORD_SEPARATOR);\n\n          // The last chunk might be incomplete, so save it for the next iteration\n          buffer = chunks.pop() || '';\n\n          // Process complete chunks\n          for (const chunk of chunks) {\n            if (chunk) {\n              // Only process non-empty chunks\n              if (typeof chunk === 'string') {\n                try {\n                  const parsedChunk = JSON.parse(chunk);\n                  yield parsedChunk;\n                } catch {\n                  // Silently ignore parsing errors to maintain stream processing\n                  // This allows the stream to continue even if one record is malformed\n                }\n              }\n            }\n          }\n        } catch {\n          // Silently ignore parsing errors to maintain stream processing\n          // This allows the stream to continue even if one record is malformed\n        }\n      }\n\n      // Process any remaining data in the buffer after stream is done\n      if (buffer) {\n        try {\n          yield JSON.parse(buffer);\n        } catch {\n          // Ignore parsing error for final chunk\n        }\n      }\n    } finally {\n      // Always ensure we clean up the reader\n      reader.cancel().catch(() => {\n        // Ignore cancel errors\n      });\n    }\n  }\n\n  /**\n   * Streams a response from the v-next network\n   * @param params - Stream parameters including message\n   * @returns Promise containing the results\n   */\n  async stream(params: GenerateOrStreamVNextNetworkParams, onRecord: (record: WatchEvent) => void) {\n    const response: Response = await this.request(`/api/networks/v-next/${this.networkId}/stream`, {\n      method: 'POST',\n      body: {\n        ...params,\n        runtimeContext: parseClientRuntimeContext(params.runtimeContext),\n      },\n      stream: true,\n    });\n\n    if (!response.ok) {\n      throw new Error(`Failed to stream vNext network: ${response.statusText}`);\n    }\n\n    if (!response.body) {\n      throw new Error('Response body is null');\n    }\n\n    for await (const record of this.streamProcessor(response.body)) {\n      if (typeof record === 'string') {\n        onRecord(JSON.parse(record));\n      } else {\n        onRecord(record);\n      }\n    }\n  }\n\n  /**\n   * Streams a response from the v-next network loop\n   * @param params - Stream parameters including message\n   * @returns Promise containing the results\n   */\n  async loopStream(params: LoopStreamVNextNetworkParams, onRecord: (record: WatchEvent) => void) {\n    const response: Response = await this.request(`/api/networks/v-next/${this.networkId}/loop-stream`, {\n      method: 'POST',\n      body: {\n        ...params,\n        runtimeContext: parseClientRuntimeContext(params.runtimeContext),\n      },\n      stream: true,\n    });\n\n    if (!response.ok) {\n      throw new Error(`Failed to stream vNext network loop: ${response.statusText}`);\n    }\n\n    if (!response.body) {\n      throw new Error('Response body is null');\n    }\n\n    for await (const record of this.streamProcessor(response.body)) {\n      if (typeof record === 'string') {\n        onRecord(JSON.parse(record));\n      } else {\n        onRecord(record);\n      }\n    }\n  }\n}\n","import type { AbstractAgent } from '@ag-ui/client';\nimport type { ServerDetailInfo } from '@mastra/core/mcp';\nimport { AGUIAdapter } from './adapters/agui';\nimport {\n  Agent,\n  MemoryThread,\n  Tool,\n  Workflow,\n  Vector,\n  BaseResource,\n  Network,\n  A2A,\n  MCPTool,\n  LegacyWorkflow,\n} from './resources';\nimport { NetworkMemoryThread } from './resources/network-memory-thread';\nimport { VNextNetwork } from './resources/vNextNetwork';\nimport type {\n  ClientOptions,\n  CreateMemoryThreadParams,\n  CreateMemoryThreadResponse,\n  GetAgentResponse,\n  GetLogParams,\n  GetLogsParams,\n  GetLogsResponse,\n  GetMemoryThreadParams,\n  GetMemoryThreadResponse,\n  GetNetworkResponse,\n  GetTelemetryParams,\n  GetTelemetryResponse,\n  GetToolResponse,\n  GetWorkflowResponse,\n  SaveMessageToMemoryParams,\n  SaveMessageToMemoryResponse,\n  McpServerListResponse,\n  McpServerToolListResponse,\n  GetLegacyWorkflowResponse,\n  GetVNextNetworkResponse,\n  GetNetworkMemoryThreadParams,\n  CreateNetworkMemoryThreadParams,\n  SaveNetworkMessageToMemoryParams,\n  GetScorerResponse,\n  GetScoresByScorerIdParams,\n  GetScoresResponse,\n  GetScoresByRunIdParams,\n  GetScoresByEntityIdParams,\n  SaveScoreParams,\n  SaveScoreResponse,\n} from './types';\n\nexport class MastraClient extends BaseResource {\n  constructor(options: ClientOptions) {\n    super(options);\n  }\n\n  /**\n   * Retrieves all available agents\n   * @returns Promise containing map of agent IDs to agent details\n   */\n  public getAgents(): Promise<Record<string, GetAgentResponse>> {\n    return this.request('/api/agents');\n  }\n\n  public async getAGUI({ resourceId }: { resourceId: string }): Promise<Record<string, AbstractAgent>> {\n    const agents = await this.getAgents();\n\n    return Object.entries(agents).reduce(\n      (acc, [agentId]) => {\n        const agent = this.getAgent(agentId);\n\n        acc[agentId] = new AGUIAdapter({\n          agentId,\n          agent,\n          resourceId,\n        });\n\n        return acc;\n      },\n      {} as Record<string, AbstractAgent>,\n    );\n  }\n\n  /**\n   * Gets an agent instance by ID\n   * @param agentId - ID of the agent to retrieve\n   * @returns Agent instance\n   */\n  public getAgent(agentId: string) {\n    return new Agent(this.options, agentId);\n  }\n\n  /**\n   * Retrieves memory threads for a resource\n   * @param params - Parameters containing the resource ID\n   * @returns Promise containing array of memory threads\n   */\n  public getMemoryThreads(params: GetMemoryThreadParams): Promise<GetMemoryThreadResponse> {\n    return this.request(`/api/memory/threads?resourceid=${params.resourceId}&agentId=${params.agentId}`);\n  }\n\n  /**\n   * Creates a new memory thread\n   * @param params - Parameters for creating the memory thread\n   * @returns Promise containing the created memory thread\n   */\n  public createMemoryThread(params: CreateMemoryThreadParams): Promise<CreateMemoryThreadResponse> {\n    return this.request(`/api/memory/threads?agentId=${params.agentId}`, { method: 'POST', body: params });\n  }\n\n  /**\n   * Gets a memory thread instance by ID\n   * @param threadId - ID of the memory thread to retrieve\n   * @returns MemoryThread instance\n   */\n  public getMemoryThread(threadId: string, agentId: string) {\n    return new MemoryThread(this.options, threadId, agentId);\n  }\n\n  /**\n   * Saves messages to memory\n   * @param params - Parameters containing messages to save\n   * @returns Promise containing the saved messages\n   */\n  public saveMessageToMemory(params: SaveMessageToMemoryParams): Promise<SaveMessageToMemoryResponse> {\n    return this.request(`/api/memory/save-messages?agentId=${params.agentId}`, {\n      method: 'POST',\n      body: params,\n    });\n  }\n\n  /**\n   * Gets the status of the memory system\n   * @returns Promise containing memory system status\n   */\n  public getMemoryStatus(agentId: string): Promise<{ result: boolean }> {\n    return this.request(`/api/memory/status?agentId=${agentId}`);\n  }\n\n  /**\n   * Retrieves memory threads for a resource\n   * @param params - Parameters containing the resource ID\n   * @returns Promise containing array of memory threads\n   */\n  public getNetworkMemoryThreads(params: GetNetworkMemoryThreadParams): Promise<GetMemoryThreadResponse> {\n    return this.request(`/api/memory/network/threads?resourceid=${params.resourceId}&networkId=${params.networkId}`);\n  }\n\n  /**\n   * Creates a new memory thread\n   * @param params - Parameters for creating the memory thread\n   * @returns Promise containing the created memory thread\n   */\n  public createNetworkMemoryThread(params: CreateNetworkMemoryThreadParams): Promise<CreateMemoryThreadResponse> {\n    return this.request(`/api/memory/network/threads?networkId=${params.networkId}`, { method: 'POST', body: params });\n  }\n\n  /**\n   * Gets a memory thread instance by ID\n   * @param threadId - ID of the memory thread to retrieve\n   * @returns MemoryThread instance\n   */\n  public getNetworkMemoryThread(threadId: string, networkId: string) {\n    return new NetworkMemoryThread(this.options, threadId, networkId);\n  }\n\n  /**\n   * Saves messages to memory\n   * @param params - Parameters containing messages to save\n   * @returns Promise containing the saved messages\n   */\n  public saveNetworkMessageToMemory(params: SaveNetworkMessageToMemoryParams): Promise<SaveMessageToMemoryResponse> {\n    return this.request(`/api/memory/network/save-messages?networkId=${params.networkId}`, {\n      method: 'POST',\n      body: params,\n    });\n  }\n\n  /**\n   * Gets the status of the memory system\n   * @returns Promise containing memory system status\n   */\n  public getNetworkMemoryStatus(networkId: string): Promise<{ result: boolean }> {\n    return this.request(`/api/memory/network/status?networkId=${networkId}`);\n  }\n\n  /**\n   * Retrieves all available tools\n   * @returns Promise containing map of tool IDs to tool details\n   */\n  public getTools(): Promise<Record<string, GetToolResponse>> {\n    return this.request('/api/tools');\n  }\n\n  /**\n   * Gets a tool instance by ID\n   * @param toolId - ID of the tool to retrieve\n   * @returns Tool instance\n   */\n  public getTool(toolId: string) {\n    return new Tool(this.options, toolId);\n  }\n\n  /**\n   * Retrieves all available legacy workflows\n   * @returns Promise containing map of legacy workflow IDs to legacy workflow details\n   */\n  public getLegacyWorkflows(): Promise<Record<string, GetLegacyWorkflowResponse>> {\n    return this.request('/api/workflows/legacy');\n  }\n\n  /**\n   * Gets a legacy workflow instance by ID\n   * @param workflowId - ID of the legacy workflow to retrieve\n   * @returns Legacy Workflow instance\n   */\n  public getLegacyWorkflow(workflowId: string) {\n    return new LegacyWorkflow(this.options, workflowId);\n  }\n\n  /**\n   * Retrieves all available workflows\n   * @returns Promise containing map of workflow IDs to workflow details\n   */\n  public getWorkflows(): Promise<Record<string, GetWorkflowResponse>> {\n    return this.request('/api/workflows');\n  }\n\n  /**\n   * Gets a workflow instance by ID\n   * @param workflowId - ID of the workflow to retrieve\n   * @returns Workflow instance\n   */\n  public getWorkflow(workflowId: string) {\n    return new Workflow(this.options, workflowId);\n  }\n\n  /**\n   * Gets a vector instance by name\n   * @param vectorName - Name of the vector to retrieve\n   * @returns Vector instance\n   */\n  public getVector(vectorName: string) {\n    return new Vector(this.options, vectorName);\n  }\n\n  /**\n   * Retrieves logs\n   * @param params - Parameters for filtering logs\n   * @returns Promise containing array of log messages\n   */\n  public getLogs(params: GetLogsParams): Promise<GetLogsResponse> {\n    const { transportId, fromDate, toDate, logLevel, filters, page, perPage } = params;\n    const _filters = filters ? Object.entries(filters).map(([key, value]) => `${key}:${value}`) : [];\n\n    const searchParams = new URLSearchParams();\n    if (transportId) {\n      searchParams.set('transportId', transportId);\n    }\n    if (fromDate) {\n      searchParams.set('fromDate', fromDate.toISOString());\n    }\n    if (toDate) {\n      searchParams.set('toDate', toDate.toISOString());\n    }\n    if (logLevel) {\n      searchParams.set('logLevel', logLevel);\n    }\n    if (page) {\n      searchParams.set('page', String(page));\n    }\n    if (perPage) {\n      searchParams.set('perPage', String(perPage));\n    }\n    if (_filters) {\n      if (Array.isArray(_filters)) {\n        for (const filter of _filters) {\n          searchParams.append('filters', filter);\n        }\n      } else {\n        searchParams.set('filters', _filters);\n      }\n    }\n\n    if (searchParams.size) {\n      return this.request(`/api/logs?${searchParams}`);\n    } else {\n      return this.request(`/api/logs`);\n    }\n  }\n\n  /**\n   * Gets logs for a specific run\n   * @param params - Parameters containing run ID to retrieve\n   * @returns Promise containing array of log messages\n   */\n  public getLogForRun(params: GetLogParams): Promise<GetLogsResponse> {\n    const { runId, transportId, fromDate, toDate, logLevel, filters, page, perPage } = params;\n\n    const _filters = filters ? Object.entries(filters).map(([key, value]) => `${key}:${value}`) : [];\n    const searchParams = new URLSearchParams();\n    if (runId) {\n      searchParams.set('runId', runId);\n    }\n    if (transportId) {\n      searchParams.set('transportId', transportId);\n    }\n    if (fromDate) {\n      searchParams.set('fromDate', fromDate.toISOString());\n    }\n    if (toDate) {\n      searchParams.set('toDate', toDate.toISOString());\n    }\n    if (logLevel) {\n      searchParams.set('logLevel', logLevel);\n    }\n    if (page) {\n      searchParams.set('page', String(page));\n    }\n    if (perPage) {\n      searchParams.set('perPage', String(perPage));\n    }\n\n    if (_filters) {\n      if (Array.isArray(_filters)) {\n        for (const filter of _filters) {\n          searchParams.append('filters', filter);\n        }\n      } else {\n        searchParams.set('filters', _filters);\n      }\n    }\n\n    if (searchParams.size) {\n      return this.request(`/api/logs/${runId}?${searchParams}`);\n    } else {\n      return this.request(`/api/logs/${runId}`);\n    }\n  }\n\n  /**\n   * List of all log transports\n   * @returns Promise containing list of log transports\n   */\n  public getLogTransports(): Promise<{ transports: string[] }> {\n    return this.request('/api/logs/transports');\n  }\n\n  /**\n   * List of all traces (paged)\n   * @param params - Parameters for filtering traces\n   * @returns Promise containing telemetry data\n   */\n  public getTelemetry(params?: GetTelemetryParams): Promise<GetTelemetryResponse> {\n    const { name, scope, page, perPage, attribute, fromDate, toDate } = params || {};\n    const _attribute = attribute ? Object.entries(attribute).map(([key, value]) => `${key}:${value}`) : [];\n\n    const searchParams = new URLSearchParams();\n    if (name) {\n      searchParams.set('name', name);\n    }\n    if (scope) {\n      searchParams.set('scope', scope);\n    }\n    if (page) {\n      searchParams.set('page', String(page));\n    }\n    if (perPage) {\n      searchParams.set('perPage', String(perPage));\n    }\n    if (_attribute) {\n      if (Array.isArray(_attribute)) {\n        for (const attr of _attribute) {\n          searchParams.append('attribute', attr);\n        }\n      } else {\n        searchParams.set('attribute', _attribute);\n      }\n    }\n    if (fromDate) {\n      searchParams.set('fromDate', fromDate.toISOString());\n    }\n    if (toDate) {\n      searchParams.set('toDate', toDate.toISOString());\n    }\n\n    if (searchParams.size) {\n      return this.request(`/api/telemetry?${searchParams}`);\n    } else {\n      return this.request(`/api/telemetry`);\n    }\n  }\n\n  /**\n   * Retrieves all available networks\n   * @returns Promise containing map of network IDs to network details\n   */\n  public getNetworks(): Promise<Array<GetNetworkResponse>> {\n    return this.request('/api/networks');\n  }\n\n  /**\n   * Retrieves all available vNext networks\n   * @returns Promise containing map of vNext network IDs to vNext network details\n   */\n  public getVNextNetworks(): Promise<Array<GetVNextNetworkResponse>> {\n    return this.request('/api/networks/v-next');\n  }\n\n  /**\n   * Gets a network instance by ID\n   * @param networkId - ID of the network to retrieve\n   * @returns Network instance\n   */\n  public getNetwork(networkId: string) {\n    return new Network(this.options, networkId);\n  }\n\n  /**\n   * Gets a vNext network instance by ID\n   * @param networkId - ID of the vNext network to retrieve\n   * @returns vNext Network instance\n   */\n  public getVNextNetwork(networkId: string) {\n    return new VNextNetwork(this.options, networkId);\n  }\n\n  /**\n   * Retrieves a list of available MCP servers.\n   * @param params - Optional parameters for pagination (limit, offset).\n   * @returns Promise containing the list of MCP servers and pagination info.\n   */\n  public getMcpServers(params?: { limit?: number; offset?: number }): Promise<McpServerListResponse> {\n    const searchParams = new URLSearchParams();\n    if (params?.limit !== undefined) {\n      searchParams.set('limit', String(params.limit));\n    }\n    if (params?.offset !== undefined) {\n      searchParams.set('offset', String(params.offset));\n    }\n    const queryString = searchParams.toString();\n    return this.request(`/api/mcp/v0/servers${queryString ? `?${queryString}` : ''}`);\n  }\n\n  /**\n   * Retrieves detailed information for a specific MCP server.\n   * @param serverId - The ID of the MCP server to retrieve.\n   * @param params - Optional parameters, e.g., specific version.\n   * @returns Promise containing the detailed MCP server information.\n   */\n  public getMcpServerDetails(serverId: string, params?: { version?: string }): Promise<ServerDetailInfo> {\n    const searchParams = new URLSearchParams();\n    if (params?.version) {\n      searchParams.set('version', params.version);\n    }\n    const queryString = searchParams.toString();\n    return this.request(`/api/mcp/v0/servers/${serverId}${queryString ? `?${queryString}` : ''}`);\n  }\n\n  /**\n   * Retrieves a list of tools for a specific MCP server.\n   * @param serverId - The ID of the MCP server.\n   * @returns Promise containing the list of tools.\n   */\n  public getMcpServerTools(serverId: string): Promise<McpServerToolListResponse> {\n    return this.request(`/api/mcp/${serverId}/tools`);\n  }\n\n  /**\n   * Gets an MCPTool resource instance for a specific tool on an MCP server.\n   * This instance can then be used to fetch details or execute the tool.\n   * @param serverId - The ID of the MCP server.\n   * @param toolId - The ID of the tool.\n   * @returns MCPTool instance.\n   */\n  public getMcpServerTool(serverId: string, toolId: string): MCPTool {\n    return new MCPTool(this.options, serverId, toolId);\n  }\n\n  /**\n   * Gets an A2A client for interacting with an agent via the A2A protocol\n   * @param agentId - ID of the agent to interact with\n   * @returns A2A client instance\n   */\n  public getA2A(agentId: string) {\n    return new A2A(this.options, agentId);\n  }\n\n  /**\n   * Retrieves the working memory for a specific thread (optionally resource-scoped).\n   * @param agentId - ID of the agent.\n   * @param threadId - ID of the thread.\n   * @param resourceId - Optional ID of the resource.\n   * @returns Working memory for the specified thread or resource.\n   */\n  public getWorkingMemory({\n    agentId,\n    threadId,\n    resourceId,\n  }: {\n    agentId: string;\n    threadId: string;\n    resourceId?: string;\n  }) {\n    return this.request(`/api/memory/threads/${threadId}/working-memory?agentId=${agentId}&resourceId=${resourceId}`);\n  }\n\n  /**\n   * Updates the working memory for a specific thread (optionally resource-scoped).\n   * @param agentId - ID of the agent.\n   * @param threadId - ID of the thread.\n   * @param workingMemory - The new working memory content.\n   * @param resourceId - Optional ID of the resource.\n   */\n  public updateWorkingMemory({\n    agentId,\n    threadId,\n    workingMemory,\n    resourceId,\n  }: {\n    agentId: string;\n    threadId: string;\n    workingMemory: string;\n    resourceId?: string;\n  }) {\n    return this.request(`/api/memory/threads/${threadId}/working-memory?agentId=${agentId}`, {\n      method: 'POST',\n      body: {\n        workingMemory,\n        resourceId,\n      },\n    });\n  }\n\n  /**\n   * Retrieves all available scorers\n   * @returns Promise containing list of available scorers\n   */\n  public getScorers(): Promise<Record<string, GetScorerResponse>> {\n    return this.request('/api/scores/scorers');\n  }\n\n  /**\n   * Retrieves a scorer by ID\n   * @param scorerId - ID of the scorer to retrieve\n   * @returns Promise containing the scorer\n   */\n  public getScorer(scorerId: string): Promise<GetScorerResponse> {\n    return this.request(`/api/scores/scorers/${scorerId}`);\n  }\n\n  public getScoresByScorerId(params: GetScoresByScorerIdParams): Promise<GetScoresResponse> {\n    const { page, perPage, scorerId, entityId, entityType } = params;\n    const searchParams = new URLSearchParams();\n\n    if (entityId) {\n      searchParams.set('entityId', entityId);\n    }\n    if (entityType) {\n      searchParams.set('entityType', entityType);\n    }\n\n    if (page !== undefined) {\n      searchParams.set('page', String(page));\n    }\n    if (perPage !== undefined) {\n      searchParams.set('perPage', String(perPage));\n    }\n    const queryString = searchParams.toString();\n    return this.request(`/api/scores/scorer/${scorerId}${queryString ? `?${queryString}` : ''}`);\n  }\n\n  /**\n   * Retrieves scores by run ID\n   * @param params - Parameters containing run ID and pagination options\n   * @returns Promise containing scores and pagination info\n   */\n  public getScoresByRunId(params: GetScoresByRunIdParams): Promise<GetScoresResponse> {\n    const { runId, page, perPage } = params;\n    const searchParams = new URLSearchParams();\n\n    if (page !== undefined) {\n      searchParams.set('page', String(page));\n    }\n    if (perPage !== undefined) {\n      searchParams.set('perPage', String(perPage));\n    }\n\n    const queryString = searchParams.toString();\n    return this.request(`/api/scores/run/${runId}${queryString ? `?${queryString}` : ''}`);\n  }\n\n  /**\n   * Retrieves scores by entity ID and type\n   * @param params - Parameters containing entity ID, type, and pagination options\n   * @returns Promise containing scores and pagination info\n   */\n  public getScoresByEntityId(params: GetScoresByEntityIdParams): Promise<GetScoresResponse> {\n    const { entityId, entityType, page, perPage } = params;\n    const searchParams = new URLSearchParams();\n\n    if (page !== undefined) {\n      searchParams.set('page', String(page));\n    }\n    if (perPage !== undefined) {\n      searchParams.set('perPage', String(perPage));\n    }\n\n    const queryString = searchParams.toString();\n    return this.request(`/api/scores/entity/${entityType}/${entityId}${queryString ? `?${queryString}` : ''}`);\n  }\n\n  /**\n   * Saves a score\n   * @param params - Parameters containing the score data to save\n   * @returns Promise containing the saved score\n   */\n  public saveScore(params: SaveScoreParams): Promise<SaveScoreResponse> {\n    return this.request('/api/scores', {\n      method: 'POST',\n      body: params,\n    });\n  }\n\n  /**\n   * Retrieves model providers with available keys\n   * @returns Promise containing model providers with available keys\n   */\n  getModelProviders(): Promise<string[]> {\n    return this.request(`/api/model-providers`);\n  }\n}\n"]}