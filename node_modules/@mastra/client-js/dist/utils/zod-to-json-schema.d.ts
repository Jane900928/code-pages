import { ZodSchema } from 'zod';
export declare function zodToJsonSchema<T extends ZodSchema | any>(zodSchema: T): T | ({
    anyOf: import("zod-to-json-schema").JsonSchema7DateType[];
} & {
    title?: string;
    default?: any;
    description?: string;
    markdownDescription?: string;
} & {
    $schema?: string | undefined;
    definitions?: {
        [key: string]: import("zod-to-json-schema").JsonSchema7Type;
    } | undefined;
}) | ({
    type: "object" | "array";
} & {
    title?: string;
    default?: any;
    description?: string;
    markdownDescription?: string;
} & {
    $schema?: string | undefined;
    definitions?: {
        [key: string]: import("zod-to-json-schema").JsonSchema7Type;
    } | undefined;
}) | ({
    type: ("string" | "number" | "boolean" | "integer" | "null") | ("string" | "number" | "boolean" | "integer" | "null")[];
} & {
    title?: string;
    default?: any;
    description?: string;
    markdownDescription?: string;
} & {
    $schema?: string | undefined;
    definitions?: {
        [key: string]: import("zod-to-json-schema").JsonSchema7Type;
    } | undefined;
}) | ({
    anyOf: import("zod-to-json-schema").JsonSchema7Type[];
} & {
    title?: string;
    default?: any;
    description?: string;
    markdownDescription?: string;
} & {
    $schema?: string | undefined;
    definitions?: {
        [key: string]: import("zod-to-json-schema").JsonSchema7Type;
    } | undefined;
}) | (import("zod-to-json-schema").JsonSchema7UndefinedType & {
    title?: string;
    default?: any;
    description?: string;
    markdownDescription?: string;
} & {
    $schema?: string | undefined;
    definitions?: {
        [key: string]: import("zod-to-json-schema").JsonSchema7Type;
    } | undefined;
}) | (import("zod-to-json-schema").JsonSchema7AnyType & {
    title?: string;
    default?: any;
    description?: string;
    markdownDescription?: string;
} & {
    $schema?: string | undefined;
    definitions?: {
        [key: string]: import("zod-to-json-schema").JsonSchema7Type;
    } | undefined;
}) | ({
    anyOf: [import("zod-to-json-schema").JsonSchema7Type, import("zod-to-json-schema").JsonSchema7NullType];
} & {
    title?: string;
    default?: any;
    description?: string;
    markdownDescription?: string;
} & {
    $schema?: string | undefined;
    definitions?: {
        [key: string]: import("zod-to-json-schema").JsonSchema7Type;
    } | undefined;
}) | ({
    type: [string, "null"];
} & {
    title?: string;
    default?: any;
    description?: string;
    markdownDescription?: string;
} & {
    $schema?: string | undefined;
    definitions?: {
        [key: string]: import("zod-to-json-schema").JsonSchema7Type;
    } | undefined;
}) | (import("zod-to-json-schema").JsonSchema7AllOfType & {
    title?: string;
    default?: any;
    description?: string;
    markdownDescription?: string;
} & {
    $schema?: string | undefined;
    definitions?: {
        [key: string]: import("zod-to-json-schema").JsonSchema7Type;
    } | undefined;
});
//# sourceMappingURL=zod-to-json-schema.d.ts.map