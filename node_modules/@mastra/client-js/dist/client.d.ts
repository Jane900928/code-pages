import type { AbstractAgent } from '@ag-ui/client';
import type { ServerDetailInfo } from '@mastra/core/mcp';
import { Agent, MemoryThread, Tool, Workflow, Vector, BaseResource, Network, A2A, MCPTool, LegacyWorkflow } from './resources/index.js';
import { NetworkMemoryThread } from './resources/network-memory-thread.js';
import { VNextNetwork } from './resources/vNextNetwork.js';
import type { ClientOptions, CreateMemoryThreadParams, CreateMemoryThreadResponse, GetAgentResponse, GetLogParams, GetLogsParams, GetLogsResponse, GetMemoryThreadParams, GetMemoryThreadResponse, GetNetworkResponse, GetTelemetryParams, GetTelemetryResponse, GetToolResponse, GetWorkflowResponse, SaveMessageToMemoryParams, SaveMessageToMemoryResponse, McpServerListResponse, McpServerToolListResponse, GetLegacyWorkflowResponse, GetVNextNetworkResponse, GetNetworkMemoryThreadParams, CreateNetworkMemoryThreadParams, SaveNetworkMessageToMemoryParams, GetScorerResponse, GetScoresByScorerIdParams, GetScoresResponse, GetScoresByRunIdParams, GetScoresByEntityIdParams, SaveScoreParams, SaveScoreResponse } from './types.js';
export declare class MastraClient extends BaseResource {
    constructor(options: ClientOptions);
    /**
     * Retrieves all available agents
     * @returns Promise containing map of agent IDs to agent details
     */
    getAgents(): Promise<Record<string, GetAgentResponse>>;
    getAGUI({ resourceId }: {
        resourceId: string;
    }): Promise<Record<string, AbstractAgent>>;
    /**
     * Gets an agent instance by ID
     * @param agentId - ID of the agent to retrieve
     * @returns Agent instance
     */
    getAgent(agentId: string): Agent;
    /**
     * Retrieves memory threads for a resource
     * @param params - Parameters containing the resource ID
     * @returns Promise containing array of memory threads
     */
    getMemoryThreads(params: GetMemoryThreadParams): Promise<GetMemoryThreadResponse>;
    /**
     * Creates a new memory thread
     * @param params - Parameters for creating the memory thread
     * @returns Promise containing the created memory thread
     */
    createMemoryThread(params: CreateMemoryThreadParams): Promise<CreateMemoryThreadResponse>;
    /**
     * Gets a memory thread instance by ID
     * @param threadId - ID of the memory thread to retrieve
     * @returns MemoryThread instance
     */
    getMemoryThread(threadId: string, agentId: string): MemoryThread;
    /**
     * Saves messages to memory
     * @param params - Parameters containing messages to save
     * @returns Promise containing the saved messages
     */
    saveMessageToMemory(params: SaveMessageToMemoryParams): Promise<SaveMessageToMemoryResponse>;
    /**
     * Gets the status of the memory system
     * @returns Promise containing memory system status
     */
    getMemoryStatus(agentId: string): Promise<{
        result: boolean;
    }>;
    /**
     * Retrieves memory threads for a resource
     * @param params - Parameters containing the resource ID
     * @returns Promise containing array of memory threads
     */
    getNetworkMemoryThreads(params: GetNetworkMemoryThreadParams): Promise<GetMemoryThreadResponse>;
    /**
     * Creates a new memory thread
     * @param params - Parameters for creating the memory thread
     * @returns Promise containing the created memory thread
     */
    createNetworkMemoryThread(params: CreateNetworkMemoryThreadParams): Promise<CreateMemoryThreadResponse>;
    /**
     * Gets a memory thread instance by ID
     * @param threadId - ID of the memory thread to retrieve
     * @returns MemoryThread instance
     */
    getNetworkMemoryThread(threadId: string, networkId: string): NetworkMemoryThread;
    /**
     * Saves messages to memory
     * @param params - Parameters containing messages to save
     * @returns Promise containing the saved messages
     */
    saveNetworkMessageToMemory(params: SaveNetworkMessageToMemoryParams): Promise<SaveMessageToMemoryResponse>;
    /**
     * Gets the status of the memory system
     * @returns Promise containing memory system status
     */
    getNetworkMemoryStatus(networkId: string): Promise<{
        result: boolean;
    }>;
    /**
     * Retrieves all available tools
     * @returns Promise containing map of tool IDs to tool details
     */
    getTools(): Promise<Record<string, GetToolResponse>>;
    /**
     * Gets a tool instance by ID
     * @param toolId - ID of the tool to retrieve
     * @returns Tool instance
     */
    getTool(toolId: string): Tool;
    /**
     * Retrieves all available legacy workflows
     * @returns Promise containing map of legacy workflow IDs to legacy workflow details
     */
    getLegacyWorkflows(): Promise<Record<string, GetLegacyWorkflowResponse>>;
    /**
     * Gets a legacy workflow instance by ID
     * @param workflowId - ID of the legacy workflow to retrieve
     * @returns Legacy Workflow instance
     */
    getLegacyWorkflow(workflowId: string): LegacyWorkflow;
    /**
     * Retrieves all available workflows
     * @returns Promise containing map of workflow IDs to workflow details
     */
    getWorkflows(): Promise<Record<string, GetWorkflowResponse>>;
    /**
     * Gets a workflow instance by ID
     * @param workflowId - ID of the workflow to retrieve
     * @returns Workflow instance
     */
    getWorkflow(workflowId: string): Workflow;
    /**
     * Gets a vector instance by name
     * @param vectorName - Name of the vector to retrieve
     * @returns Vector instance
     */
    getVector(vectorName: string): Vector;
    /**
     * Retrieves logs
     * @param params - Parameters for filtering logs
     * @returns Promise containing array of log messages
     */
    getLogs(params: GetLogsParams): Promise<GetLogsResponse>;
    /**
     * Gets logs for a specific run
     * @param params - Parameters containing run ID to retrieve
     * @returns Promise containing array of log messages
     */
    getLogForRun(params: GetLogParams): Promise<GetLogsResponse>;
    /**
     * List of all log transports
     * @returns Promise containing list of log transports
     */
    getLogTransports(): Promise<{
        transports: string[];
    }>;
    /**
     * List of all traces (paged)
     * @param params - Parameters for filtering traces
     * @returns Promise containing telemetry data
     */
    getTelemetry(params?: GetTelemetryParams): Promise<GetTelemetryResponse>;
    /**
     * Retrieves all available networks
     * @returns Promise containing map of network IDs to network details
     */
    getNetworks(): Promise<Array<GetNetworkResponse>>;
    /**
     * Retrieves all available vNext networks
     * @returns Promise containing map of vNext network IDs to vNext network details
     */
    getVNextNetworks(): Promise<Array<GetVNextNetworkResponse>>;
    /**
     * Gets a network instance by ID
     * @param networkId - ID of the network to retrieve
     * @returns Network instance
     */
    getNetwork(networkId: string): Network;
    /**
     * Gets a vNext network instance by ID
     * @param networkId - ID of the vNext network to retrieve
     * @returns vNext Network instance
     */
    getVNextNetwork(networkId: string): VNextNetwork;
    /**
     * Retrieves a list of available MCP servers.
     * @param params - Optional parameters for pagination (limit, offset).
     * @returns Promise containing the list of MCP servers and pagination info.
     */
    getMcpServers(params?: {
        limit?: number;
        offset?: number;
    }): Promise<McpServerListResponse>;
    /**
     * Retrieves detailed information for a specific MCP server.
     * @param serverId - The ID of the MCP server to retrieve.
     * @param params - Optional parameters, e.g., specific version.
     * @returns Promise containing the detailed MCP server information.
     */
    getMcpServerDetails(serverId: string, params?: {
        version?: string;
    }): Promise<ServerDetailInfo>;
    /**
     * Retrieves a list of tools for a specific MCP server.
     * @param serverId - The ID of the MCP server.
     * @returns Promise containing the list of tools.
     */
    getMcpServerTools(serverId: string): Promise<McpServerToolListResponse>;
    /**
     * Gets an MCPTool resource instance for a specific tool on an MCP server.
     * This instance can then be used to fetch details or execute the tool.
     * @param serverId - The ID of the MCP server.
     * @param toolId - The ID of the tool.
     * @returns MCPTool instance.
     */
    getMcpServerTool(serverId: string, toolId: string): MCPTool;
    /**
     * Gets an A2A client for interacting with an agent via the A2A protocol
     * @param agentId - ID of the agent to interact with
     * @returns A2A client instance
     */
    getA2A(agentId: string): A2A;
    /**
     * Retrieves the working memory for a specific thread (optionally resource-scoped).
     * @param agentId - ID of the agent.
     * @param threadId - ID of the thread.
     * @param resourceId - Optional ID of the resource.
     * @returns Working memory for the specified thread or resource.
     */
    getWorkingMemory({ agentId, threadId, resourceId, }: {
        agentId: string;
        threadId: string;
        resourceId?: string;
    }): Promise<unknown>;
    /**
     * Updates the working memory for a specific thread (optionally resource-scoped).
     * @param agentId - ID of the agent.
     * @param threadId - ID of the thread.
     * @param workingMemory - The new working memory content.
     * @param resourceId - Optional ID of the resource.
     */
    updateWorkingMemory({ agentId, threadId, workingMemory, resourceId, }: {
        agentId: string;
        threadId: string;
        workingMemory: string;
        resourceId?: string;
    }): Promise<unknown>;
    /**
     * Retrieves all available scorers
     * @returns Promise containing list of available scorers
     */
    getScorers(): Promise<Record<string, GetScorerResponse>>;
    /**
     * Retrieves a scorer by ID
     * @param scorerId - ID of the scorer to retrieve
     * @returns Promise containing the scorer
     */
    getScorer(scorerId: string): Promise<GetScorerResponse>;
    getScoresByScorerId(params: GetScoresByScorerIdParams): Promise<GetScoresResponse>;
    /**
     * Retrieves scores by run ID
     * @param params - Parameters containing run ID and pagination options
     * @returns Promise containing scores and pagination info
     */
    getScoresByRunId(params: GetScoresByRunIdParams): Promise<GetScoresResponse>;
    /**
     * Retrieves scores by entity ID and type
     * @param params - Parameters containing entity ID, type, and pagination options
     * @returns Promise containing scores and pagination info
     */
    getScoresByEntityId(params: GetScoresByEntityIdParams): Promise<GetScoresResponse>;
    /**
     * Saves a score
     * @param params - Parameters containing the score data to save
     * @returns Promise containing the saved score
     */
    saveScore(params: SaveScoreParams): Promise<SaveScoreResponse>;
    /**
     * Retrieves model providers with available keys
     * @returns Promise containing model providers with available keys
     */
    getModelProviders(): Promise<string[]>;
}
//# sourceMappingURL=client.d.ts.map